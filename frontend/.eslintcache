[{"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\index.tsx":"1","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\utils\\utils.tsx":"2","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\App.tsx":"3","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\EnterName.tsx":"4","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Config.tsx":"5","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ConfigTable.tsx":"6","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ReadyPlayers.tsx":"7","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Snackbar.tsx":"8","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Player.tsx":"9","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Walkthrough.tsx":"10","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Toast.tsx":"11","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\PcTicket.tsx":"12","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Board.tsx":"13","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Prizes.tsx":"14","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\MultipleHostTickets.tsx":"15","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Ticket.tsx":"16","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\NewNumber.tsx":"17","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Notification.tsx":"18","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\WinningButtons.tsx":"19","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\BoardLine.tsx":"20","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\HostTicket.tsx":"21","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Waiting.tsx":"22","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Timer.tsx":"23","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\House.tsx":"24","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\GoneNumbers.tsx":"25","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Box.tsx":"26","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ResultButtons.tsx":"27","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Line.tsx":"28","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\utils\\settings.tsx":"29"},{"size":349,"mtime":1647328043273,"results":"30","hashOfConfig":"31"},{"size":7435,"mtime":1647328043273,"results":"32","hashOfConfig":"31"},{"size":2290,"mtime":1647683495123,"results":"33","hashOfConfig":"31"},{"size":2265,"mtime":1647683495139,"results":"34","hashOfConfig":"31"},{"size":17719,"mtime":1647683495139,"results":"35","hashOfConfig":"31"},{"size":2466,"mtime":1647369154226,"results":"36","hashOfConfig":"31"},{"size":2174,"mtime":1647610397899,"results":"37","hashOfConfig":"31"},{"size":1554,"mtime":1647408234395,"results":"38","hashOfConfig":"31"},{"size":4464,"mtime":1647610179970,"results":"39","hashOfConfig":"31"},{"size":4648,"mtime":1647328043258,"results":"40","hashOfConfig":"31"},{"size":1427,"mtime":1647371303965,"results":"41","hashOfConfig":"31"},{"size":3955,"mtime":1647684152458,"results":"42","hashOfConfig":"31"},{"size":6143,"mtime":1647683495139,"results":"43","hashOfConfig":"31"},{"size":5397,"mtime":1647682227557,"results":"44","hashOfConfig":"31"},{"size":4088,"mtime":1647328043258,"results":"45","hashOfConfig":"31"},{"size":1083,"mtime":1647328043258,"results":"46","hashOfConfig":"31"},{"size":4395,"mtime":1647684362311,"results":"47","hashOfConfig":"31"},{"size":3093,"mtime":1647328043258,"results":"48","hashOfConfig":"31"},{"size":972,"mtime":1647683495139,"results":"49","hashOfConfig":"31"},{"size":472,"mtime":1647328043258,"results":"50","hashOfConfig":"31"},{"size":1333,"mtime":1647328043258,"results":"51","hashOfConfig":"31"},{"size":994,"mtime":1647328043258,"results":"52","hashOfConfig":"31"},{"size":1169,"mtime":1647381937032,"results":"53","hashOfConfig":"31"},{"size":1064,"mtime":1647328043258,"results":"54","hashOfConfig":"31"},{"size":2197,"mtime":1647558254197,"results":"55","hashOfConfig":"31"},{"size":2186,"mtime":1647559491292,"results":"56","hashOfConfig":"31"},{"size":663,"mtime":1647379112210,"results":"57","hashOfConfig":"31"},{"size":1073,"mtime":1647328043258,"results":"58","hashOfConfig":"31"},{"size":2583,"mtime":1647683743238,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1yilyjn",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\index.tsx",[],["123","124"],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\utils\\utils.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\App.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\EnterName.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Config.tsx",["125"],"import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport ConfigTable from \"./ConfigTable\";\r\nimport Player from \"./Player\";\r\nimport ReadyPlayers from \"./ReadyPlayers\";\r\nimport Snackbar from \"./Snackbar\";\r\nimport Walkthrough from \"./Walkthrough\";\r\nimport Modal from \"react-modal\";\r\nimport Toast from \"./Toast\";\r\nimport settings from \"./utils/settings\";\r\n\r\nexport interface Award {\r\n  // Actual type information:\r\n  // {\r\n  //    nameAward: string;\r\n  //    numAward: string;\r\n  // }\r\n  [index: string]: string;\r\n}\r\n\r\nexport interface PcStatus {\r\n  user: User;\r\n  ready: boolean;\r\n  pointsEarned: number;\r\n  numTickets: number;\r\n  avatars: string;\r\n}\r\n\r\nexport interface User {\r\n  username: string;\r\n  id: string;\r\n  room: string;\r\n}\r\n\r\nexport interface CurrentUser {\r\n  username: string;\r\n  id: string;\r\n  avatars: string;\r\n}\r\n\r\ninterface ConfigProps {\r\n  socket: any;\r\n  name: string;\r\n}\r\n\r\ninterface ConfigState {\r\n  type: string;\r\n\r\n  // Config\r\n  readyHost: boolean;\r\n  readyClient: boolean;\r\n\r\n  //  Host Config State options\r\n  awards: Award[];\r\n\r\n  //  PC Config State options\r\n  numHouses: number;\r\n\r\n  // List of players who are ready to play\r\n  PcsStatus: PcStatus[];\r\n  currentUser: CurrentUser[]\r\n\r\n  // notification for host disconnected\r\n  hostDisconnected: boolean;\r\n\r\n  // For warning modal which opens when host hits start game if some player is not ready\r\n  isModalOpen: boolean;\r\n\r\n  // When host tries to start game when there is no one in the game room\r\n  isToastOpen: boolean;\r\n\r\n  // when arrive on host screen, ask the user if they want to see tutorial or not\r\n  watchTutorialModal: boolean\r\n\r\n  // passed to child components to let them know if user selected to watch the tutorial or not\r\n  runWalkthrough: boolean\r\n  //\r\n  hasGameAlreadyStarted: boolean;\r\n}\r\n\r\n\r\n// Extracting roomID from the URL\r\nlet roomID = window.location.pathname.substr(\r\n  window.location.pathname.lastIndexOf(\"/\") + 1\r\n);\r\nclass Config extends Component<ConfigProps, ConfigState> {\r\n  // For the toast component to hide initially and not add animation on initial render\r\n  hideToastInitially: boolean;\r\n  constructor(props: ConfigProps) {\r\n    super(props);\r\n    this.state = {\r\n      type: \"\",\r\n      numHouses: 1,\r\n      readyHost: false,\r\n      readyClient: false,\r\n      PcsStatus: [],\r\n      currentUser: [],\r\n      isModalOpen: false,\r\n      isToastOpen: false,\r\n      watchTutorialModal: true,\r\n      runWalkthrough: false,\r\n      hasGameAlreadyStarted: false,\r\n      awards: [\r\n        {\r\n          nameAward: settings.awards.house.name,\r\n          numAward: settings.awards.house.count,\r\n          ptsAward: settings.awards.house.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.star.name,\r\n          numAward: settings.awards.star.count,\r\n          ptsAward: settings.awards.star.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.corner.name,\r\n          numAward: settings.awards.corner.count,\r\n          ptsAward: settings.awards.corner.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.lastline.name,\r\n          numAward: settings.awards.lastline.count,\r\n          ptsAward: settings.awards.lastline.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.middleline.name,\r\n          numAward: settings.awards.middleline.count,\r\n          ptsAward: settings.awards.middleline.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.firstline.name,\r\n          numAward: settings.awards.firstline.count,\r\n          ptsAward: settings.awards.firstline.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.earlyseven.name,\r\n          numAward: settings.awards.earlyseven.count,\r\n          ptsAward: settings.awards.earlyseven.pts\r\n        },\r\n        {\r\n          nameAward: settings.awards.earlyfive.name,\r\n          numAward: settings.awards.earlyfive.count,\r\n          ptsAward: settings.awards.earlyfive.pts\r\n        }\r\n      ],\r\n      hostDisconnected: false,\r\n    };\r\n    this.hideToastInitially = true;\r\n  }\r\n\r\n  // Only handles on host's config when he presses start game button.\r\n  handlleHostConfigDone = () => {\r\n    if (this.state.isModalOpen) {\r\n      this.setState({ isModalOpen: false });\r\n    }\r\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\r\n    console.log(\"config submitted from host\", this.state.awards);\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n\r\n    // asking server to join room\r\n    this.props.socket.emit(\"joinRoom\", {\r\n      room: roomID,\r\n      username: this.props.name,\r\n    });\r\n\r\n    // check if the game has already started or not\r\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\r\n      this.setState({ hasGameAlreadyStarted: true });\r\n    });\r\n\r\n    // server response: player gets know if he is host or pc\r\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any, user: User) => {\r\n      // let currentUsern = this.state.currentUser;\r\n      // let newcurrentUsern: CurrentUser = {\r\n      //   username: user.username,\r\n      //   id: user.id,\r\n      //   avatars: settings.botts(user.username)\r\n      // };\r\n      // currentUsern.push(newcurrentUsern);\r\n      this.setState({\r\n        type: playerTypeObj.type, // pass this type to player as well\r\n        // currentUser: currentUsern\r\n      });\r\n      console.log('user: ', user)\r\n\r\n      // Receiving event on Host from new PC who has joined and sending them\r\n      // the list of readyPlayers\r\n      if (playerTypeObj.type === \"Host\") {\r\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\r\n          let PcsStatus = this.state.PcsStatus;\r\n          let newPcStatus: PcStatus = {\r\n            user: user,\r\n            ready: false,\r\n            numTickets: 0,\r\n            pointsEarned: 0,\r\n            avatars: settings.botts(user.username)\r\n          };\r\n          PcsStatus.push(newPcStatus);\r\n\r\n\r\n\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n\r\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\r\n          // Find user in array and make him ready\r\n          let PcsStatus = this.state.PcsStatus;\r\n          for (let i = 0; i < PcsStatus.length; ++i) {\r\n            if (PcsStatus[i].user.id === user.id) {\r\n              PcsStatus[i].ready = true;\r\n              PcsStatus[i].numTickets = numTickets;\r\n            }\r\n          }\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n\r\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\r\n          // dealing with ready/not ready\r\n          let PcsStatus = this.state.PcsStatus;\r\n          for (let i = 0; i < PcsStatus.length; ++i) {\r\n            if (PcsStatus[i].user.id === user.id) {\r\n              // Remove this user from PcsStatus\r\n              PcsStatus.splice(i, 1);\r\n            }\r\n          }\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n      }\r\n    });\r\n\r\n    // server sending awards from Host as Host is ready\r\n    this.props.socket.on(\"HostConfigDone\", (awards: any, user: User) => {\r\n      this.setState({\r\n        awards: awards,\r\n        readyHost: true\r\n      });\r\n    });\r\n\r\n    // Know the status of all the players if someone new joined or got ready\r\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\r\n\r\n      console.log('PcsStatus', PcsStatus)\r\n      this.setState({ PcsStatus: PcsStatus });\r\n    });\r\n\r\n    // Host disconnect\r\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\r\n      console.log(userHost, \": host disconnected\");\r\n      this.setState({\r\n        hostDisconnected: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  // For Host Config\r\n  handleChangeHost = (idx: number) => (e: any) => {\r\n    const eTarget = e.target;\r\n    let name: string = eTarget.name;\r\n    let value: string = eTarget.value;\r\n\r\n    const awards = this.state.awards;\r\n\r\n    awards[idx][name] = value;\r\n\r\n    this.setState({\r\n      awards,\r\n    });\r\n  };\r\n  handleAddRow = () => {\r\n    const item = {\r\n      nameAward: \"\",\r\n      numAward: \"\",\r\n      ptsAward: \"\",\r\n    };\r\n    this.setState({\r\n      awards: [...this.state.awards, item],\r\n    });\r\n  };\r\n  handleRemoveRow = () => {\r\n    this.setState({\r\n      awards: this.state.awards.slice(0, -1),\r\n    });\r\n  };\r\n  handleRemoveSpecificRow = (idx: number) => () => {\r\n    const awards = [...this.state.awards];\r\n    awards.splice(idx, 1);\r\n    this.setState({ awards });\r\n  };\r\n\r\n  // For PC Config\r\n  handleChangePC = (event: any) => {\r\n    const { value } = event.target;\r\n    if (this.state.type === \"PC\") {\r\n      // sanity check\r\n      this.setState({\r\n        numHouses: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  // common function for Host and PC Config\r\n  handleSubmit = (event: any) => {\r\n    this.setState({\r\n      readyClient: true,\r\n    });\r\n    if (this.state.type === \"Host\") {\r\n      // start the game only when there are actual players in the game\r\n      if (this.state.PcsStatus.length > 0) {\r\n        // checking if all the players are ready\r\n        let isEveryOneReady = true;\r\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\r\n          if (!this.state.PcsStatus[i].ready) {\r\n            isEveryOneReady = false;\r\n            continue;\r\n          }\r\n        }\r\n        if (isEveryOneReady) {\r\n          this.handlleHostConfigDone();\r\n        } else {\r\n          this.setState({ isModalOpen: true });\r\n        }\r\n      } else {\r\n        // To make the toast visible\r\n        this.hideToastInitially = false;\r\n        this.setState({ isToastOpen: true });\r\n      }\r\n    } else if (this.state.type === \"PC\") {\r\n      //let everyone know that i am ready. Backend knows who I am by socket.id\r\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  loopfun = (val: number) => {\r\n    const array = [];\r\n    for (let i = 0; i < val; i++) {\r\n      array.push(<li></li>)\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // copyLinkToClipboard = () => {\r\n  //   let copyInput = document.createElement('input');\r\n  //   copyInput.setAttribute('value', settings.shartext(roomID));\r\n  //   document.body.appendChild(copyInput);\r\n  //   copyInput.select();\r\n  //   let copyResult = document.execCommand('copy');\r\n  //   document.body.removeChild(copyInput);\r\n  //   return copyResult;\r\n  // }\r\n\r\n  // shareInviteLink = () => {\r\n  //   if (navigator.share) {\r\n  //     navigator.share({\r\n  //       title: 'Share Invite Code',\r\n  //       text: settings.shartext(roomID)\r\n  //     }).then(() => {\r\n  //       console.log('Thanks for sharing!');\r\n  //     })\r\n  //   } else {\r\n  //     console.log('Sharing failed!');\r\n  //     this.copyLinkToClipboard();\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    // game is over if there is no host\r\n    if (this.state.hostDisconnected) {\r\n      return (\r\n        <div className=\"nohostleft\">\r\n          <h1 className=\"host-configuration\">\r\n            Host left the game. Please close this tab. Generate a new room if\r\n            you want to play more.\r\n          </h1>\r\n          <a href=\"/\" className=\"linkbtn\">\r\n            <button className=\"btn\">Back</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // If new playerjoins in already started game or host becomes ready (starts the game)\r\n    // this pc is not ready, let him know that he cannot play now in this game\r\n    if (\r\n      this.state.hasGameAlreadyStarted ||\r\n      (this.state.readyHost && !this.state.readyClient)\r\n    ) {\r\n      return (\r\n        <div className=\"gamestartedplaynext\">\r\n          <h1 className=\"host-configuration\">\r\n            This game was started without you. You can play in the next game.\r\n            Meanwhile you can go back to the home screen and play another game\r\n            :)\r\n          </h1>\r\n          <a href=\"/\" className=\"linkbtn\">\r\n            <button className=\"btn\">Home</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let mainComponent = null;\r\n    if (this.state.readyHost && this.state.readyClient) {\r\n      // display player\r\n      mainComponent = (\r\n        <Player\r\n          socket={this.props.socket}\r\n          numHouses={this.state.numHouses}\r\n          name={this.props.name}\r\n          type={this.state.type}\r\n          awards={this.state.awards}\r\n          players={this.state.PcsStatus}\r\n          runWalkthrough={this.state.runWalkthrough}\r\n          currentUser={this.state.currentUser}\r\n        />\r\n      );\r\n    } else if (this.state.type === \"Host\") {\r\n      // form for host configuration\r\n      //    Choosing Awards\r\n      // pass handleSubmit as a prop\r\n\r\n      mainComponent = (\r\n        <div className=\"config-container\">\r\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough} />\r\n          <Snackbar\r\n            message=\"Share this 'join code' with other players\"\r\n            actionText=\"Copy code\"\r\n          />\r\n          <Toast\r\n            message={\"There are no players in the game right now\"}\r\n            isShown={this.state.isToastOpen}\r\n            handleClose={() => {\r\n              this.setState({ isToastOpen: false });\r\n            }}\r\n            initiallyHidden={this.hideToastInitially}\r\n          />\r\n          {\r\n            this.state.isModalOpen ? <div modal-status={this.state.watchTutorialModal} className=\"modalpoppup\">\r\n              <div className=\"area\" >\r\n                <ul className=\"circles\">\r\n                  {this.loopfun(10)}\r\n                </ul>\r\n              </div >\r\n              <div className=\"modalpoppupcontent\">\r\n                <h3 style={{ color: \"#000000\" }}>Some players are still not ready.</h3>\r\n                <h3 style={{ color: \"#000000\" }}>Are you sure you want to start the game?</h3>\r\n                <div className=\"modal-buttons\">\r\n                  <button style={{ margin: 5 }} className=\"btn btn__primary\" onClick={this.handlleHostConfigDone}>Yes</button>\r\n                  <button\r\n                    style={{ margin: 5 }}\r\n                    className=\"btn\"\r\n                    onClick={() => {\r\n                      this.setState({ isModalOpen: false });\r\n                    }}\r\n                  >\r\n                    No\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div> : null\r\n          }\r\n          <h1 className=\"host-configuration\">Game Setup</h1>\r\n          <ConfigTable\r\n            awards={this.state.awards}\r\n            handleChangeHost={this.handleChangeHost}\r\n            handleAddRow={this.handleAddRow}\r\n            handleRemoveRow={this.handleRemoveRow}\r\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\r\n            handleSubmit={this.handleSubmit}\r\n          />\r\n          <ReadyPlayers players={this.state.PcsStatus} name={this.props.name} currentUser={this.state.currentUser} />\r\n        </div>\r\n      );\r\n    } else if (this.state.type === \"PC\") {\r\n      // form for PC configuration\r\n      //    Number of Tickets\r\n      mainComponent = (\r\n        <div className=\"config-container\">\r\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough} />\r\n          <div className=\"pc-configuration\">\r\n            <div className=\"game-room-name\">Invite Code: <span>{roomID}</span></div>\r\n          </div>\r\n          <div className=\"form-holder\">\r\n            <p className=\"m--0\"><strong>Welcome, {this.props.name}</strong></p>\r\n            <p className=\"mb--0 mt--5 opacity-half\">\r\n              <small className=\"lh-1\">\r\n                <i className=\"fa fa-spin fa-refresh mr--10\"></i>Waiting for host to start the Game...<br />Please keep your screen turned on till the game starts</small>\r\n            </p>\r\n          </div>\r\n          {\r\n            this.state.readyClient ?\r\n              <div className='letstart-wrap'>\r\n                <div className=\"ready btn btn__primary\">\r\n                  Ready\r\n                </div>\r\n              </div>\r\n              :\r\n              <form onSubmit={this.handleSubmit} className='letstart-wrap'>\r\n                <button className=\"btn btn__primary\" type=\"submit\">\r\n                  Let's Start\r\n                </button>\r\n              </form>\r\n\r\n          }\r\n\r\n          <ReadyPlayers players={this.state.PcsStatus} name={this.props.name} currentUser={this.state.currentUser} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n\r\n        {mainComponent}\r\n        {\r\n          this.state.watchTutorialModal ? <div modal-status={this.state.watchTutorialModal} className=\"modalpoppup\">\r\n            <div className=\"area\" >\r\n              <ul className=\"circles\">\r\n                {this.loopfun(10)}\r\n              </ul>\r\n            </div >\r\n            <div className=\"modalpoppupcontent\">\r\n              <h3 style={{ color: \"#000000\" }}>Would you like to watch tutorial?</h3>\r\n              <div className=\"modal-buttons\">\r\n                <button style={{ margin: 5 }} className=\"btn btn__primary\" onClick={() => {\r\n                  this.setState({ runWalkthrough: true, watchTutorialModal: false })\r\n                  console.log(\"clicked yes\");\r\n                }\r\n                }>Yes</button>\r\n                <button\r\n                  style={{ margin: 5 }}\r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                    console.log(\"clicked No\");\r\n                    this.setState({ runWalkthrough: false, watchTutorialModal: false });\r\n                  }}\r\n                >\r\n                  No\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n        }\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Config;\r\n","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ConfigTable.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ReadyPlayers.tsx",["126","127"],"import { url } from \"inspector\";\r\nimport * as React from \"react\";\r\nimport { PcStatus,CurrentUser } from \"./Config\";\r\n\r\ninterface ReadyPlayersProps {\r\n  players: PcStatus[];\r\n  name: string;\r\n  currentUser:CurrentUser[]\r\n}\r\n\r\nfunction ReadyPlayers(props: ReadyPlayersProps) {\r\n  let checkMark = <span className=\"checkmark\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\" /></svg></span>;\r\n  let playersComp = [];\r\n  let waitingMessage = null;\r\n\r\n  console.log('props.players: ', props.players,props.currentUser)\r\n\r\n  for (let i = 0; i < props.players.length; ++i) {\r\n    playersComp.push(\r\n      <li key={i} className={`user${props.name === props.players[i].user.username ? ' me' : ''}`}>\r\n        <div className=\"wrapperusername\">\r\n          <div className=\"user-avatar\">\r\n            <img src={`${props.players[i].avatars}`} />\r\n          </div>\r\n          <span className=\"user-name\">{props.players[i].user.username}</span>\r\n        </div>\r\n        <span className=\"user-name-ready\">{props.players[i].ready ? checkMark : <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon s-ion-icon\" viewBox=\"0 0 512 512\"><path d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"></path></svg>}</span>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  if (playersComp.length === 0) {\r\n    waitingMessage = (\r\n      <p style={{ color: \"#000000\", marginLeft: \"0.75rem\" }}>\r\n        Waiting for other players to join...\r\n      </p>\r\n    );\r\n  } else {\r\n    waitingMessage = null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"ready-players-container\">\r\n      <h1 className=\"players-in-game\"><i className=\"fa fa-spin fa-refresh mr--10\"></i>participants ({props.players.length})</h1>\r\n      <ul className=\"ready-players\">\r\n        {playersComp}\r\n      </ul>\r\n      {waitingMessage}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReadyPlayers;\r\n","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Snackbar.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Player.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Walkthrough.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Toast.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\PcTicket.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Board.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Prizes.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\MultipleHostTickets.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Ticket.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\NewNumber.tsx",["128","129"],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Notification.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\WinningButtons.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\BoardLine.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\HostTicket.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Waiting.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Timer.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\House.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\GoneNumbers.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Box.tsx",["130"],"import * as React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\n// TODO: May be we can just remove the state in this component as whatever we need is in the props\r\n// This is the component which is used by both BoardLine and also Line (ticket Line)\r\n\r\ninterface BoxProps {\r\n  value: number;\r\n\r\n  // Optional because BoardLine does not pass this, but\r\n  // for generation of ticket it is passed;\r\n  index?: number;\r\n  check?: boolean;\r\n  changeTicketState?: (index: number, check: boolean) => void;\r\n}\r\n\r\nexport interface BoxState {\r\n  value: number;\r\n  check: boolean;\r\n}\r\n\r\nclass Box extends Component<BoxProps, BoxState> {\r\n  constructor(props: BoxProps) {\r\n    super(props);\r\n    this.state = {\r\n      value: this.props.value,\r\n      check: this.props.check === undefined ? false : this.props.check,\r\n    };\r\n  }\r\n  clickHandler = () => {\r\n    if (this.props.value === 0) {\r\n      console.log('no value')\r\n    } else {\r\n      let invertCheck = this.state.check ? false : true;\r\n      this.setState({ check: invertCheck, value: this.state.value });\r\n\r\n      // Change house's state when clicked, only on ticket and not on board\r\n      if (\r\n        this.props.changeTicketState !== undefined &&\r\n        this.props.index !== undefined\r\n      ) {\r\n        this.props.changeTicketState(this.props.index, invertCheck);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  // This is only for the newNumber generated in the board sends new props to the box\r\n  // to make it mark itself\r\n  componentDidUpdate(prevProps: BoxProps) {\r\n    if (prevProps.check !== this.props.check && this.props.check) {\r\n      this.setState({ check: this.props.check });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let checkedCssClass = this.state.check ? \"checked\" : \"unchecked\";\r\n    return (\r\n      <div\r\n        className={`box ${this.state.check ? \"boxchecked\" : \"boxunchecked\"}`}\r\n\r\n        onClick={this.clickHandler}\r\n        style={{ pointerEvents: this.props.value === 0 ? \"none\" : \"auto\" }}\r\n      >\r\n        {/* <div className={checkedCssClass}></div>\r\n        <div className={checkedCssClass}></div> */}\r\n        <p>{this.props.value === 0 ? \"\" : this.props.value}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ResultButtons.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Line.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\utils\\settings.tsx",["131"],"import _ from 'lodash';\r\n\r\nexport default {\r\n    availableSpeakersList: [\r\n        {\r\n            title: 'Indian English - Aditi (FEMALE)',\r\n            path: 'aditi',\r\n        },\r\n        {\r\n            title: 'US English - Matthew (MALE)',\r\n            path: 'matthew',\r\n        }\r\n    ],\r\n    reactions: {\r\n        lol: { key: 'lol', name: 'LOL', imgName: 'react-lol', className: 'lol' },\r\n        enjoy: { key: 'enjoy', name: 'Enjoy', imgName: 'react-enjoy', className: 'enjoy' },\r\n        confused: { key: 'confused', name: 'Confused', imgName: 'react-confused', className: 'confused' },\r\n        virus: { key: 'virus', name: 'Virus', imgName: 'react-virus', className: 'virus' },\r\n        sad: { key: 'sad', name: 'Sad', imgName: 'react-sad', className: 'sad' },\r\n        cry: { key: 'cry', name: 'Cry', imgName: 'react-cry', className: 'cry' },\r\n        angry: { key: 'angry', name: 'Angry', imgName: 'react-angry', className: 'angry' },\r\n        sleepy: { key: 'sleepy', name: 'Sleepy', imgName: 'react-sleepy', className: 'sleepy' },\r\n    },\r\n    botts: (val:any)=>`https://avatars.dicebear.com/api/bottts/${val}.svg`,\r\n    shartext: (val:any)=>`Use this invite: ${val}`,\r\n    awards: {\r\n        corner: { key: 'corner', name: 'Corners', count: '2', pts: '30',status:'1' },\r\n        earlyfive: { key: 'early-five', name: 'Early Five', count: '1', pts: '40',status:'1' },\r\n        earlyseven: { key: 'early-seven', name: 'Early Seven', count: '1', pts: '30',status:'1' },\r\n        firstline: { key: 'first-line', name: 'First Line', count: '1', pts: '20',status:'1' },\r\n        house: { key: 'house', name: 'Full house', count: '2', pts: '70',status:'1' },\r\n        lastline: { key: 'last-line', name: 'Last Line', count: '1', pts: '20',status:'1' },\r\n        middleline: { key: 'middle-line', name: 'Middle Line', count: '1', pts: '20',status:'1' },\r\n        middlenumber: { key: 'middle-number', name: 'Middle Number', count: '1', pts: '30',status:'1' },\r\n        star: { key: 'star', name: 'Star', count: '2', pts: '30',status:'1' },\r\n    },\r\n    groupArrBy: (arr: any[], key: string | number, flatten = true) => {\r\n        var result = arr.reduce(function (groups: { [x: string]: any[]; }, item: { [x: string]: any; }) {\r\n            const val = item[key];\r\n            groups[val] = groups[val] || [];\r\n            groups[val].push(item);\r\n            return groups;\r\n        }, {});\r\n\r\n        let returnArr = Object.keys(result).map(function (key) {\r\n            return result[key];\r\n        });\r\n\r\n        return flatten ? _.flatten(returnArr) : returnArr;\r\n    },\r\n}",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":13},{"ruleId":"136","severity":1,"message":"140","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"141","severity":1,"message":"142","line":23,"column":13,"nodeType":"143","endLine":23,"endColumn":56},{"ruleId":"136","severity":1,"message":"144","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":58,"column":13,"nodeType":"143","endLine":58,"endColumn":61},{"ruleId":"136","severity":1,"message":"145","line":57,"column":9,"nodeType":"138","messageId":"139","endLine":57,"endColumn":24},{"ruleId":"146","severity":1,"message":"147","line":3,"column":1,"nodeType":"148","endLine":51,"endColumn":2},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'url' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PcStatus' is defined but never used.","'checkedCssClass' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]