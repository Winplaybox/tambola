[{"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\index.tsx":"1","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\utils\\utils.tsx":"2","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\App.tsx":"3","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\EnterName.tsx":"4","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Config.tsx":"5","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ConfigTable.tsx":"6","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ReadyPlayers.tsx":"7","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Snackbar.tsx":"8","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Player.tsx":"9","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Walkthrough.tsx":"10","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Toast.tsx":"11","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\PcTicket.tsx":"12","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Board.tsx":"13","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Prizes.tsx":"14","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\MultipleHostTickets.tsx":"15","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Ticket.tsx":"16","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\NewNumber.tsx":"17","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Notification.tsx":"18","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\WinningButtons.tsx":"19","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\BoardLine.tsx":"20","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\HostTicket.tsx":"21","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Waiting.tsx":"22","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Timer.tsx":"23","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\House.tsx":"24","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\GoneNumbers.tsx":"25","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Box.tsx":"26","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ResultButtons.tsx":"27","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Line.tsx":"28"},{"size":349,"mtime":1647328043273,"results":"29","hashOfConfig":"30"},{"size":7435,"mtime":1647328043273,"results":"31","hashOfConfig":"30"},{"size":1849,"mtime":1647422055890,"results":"32","hashOfConfig":"30"},{"size":2265,"mtime":1647438208426,"results":"33","hashOfConfig":"30"},{"size":15500,"mtime":1647421191166,"results":"34","hashOfConfig":"30"},{"size":2466,"mtime":1647369154226,"results":"35","hashOfConfig":"30"},{"size":1794,"mtime":1647381796015,"results":"36","hashOfConfig":"30"},{"size":1554,"mtime":1647408234395,"results":"37","hashOfConfig":"30"},{"size":4293,"mtime":1647421252808,"results":"38","hashOfConfig":"30"},{"size":4648,"mtime":1647328043258,"results":"39","hashOfConfig":"30"},{"size":1427,"mtime":1647371303965,"results":"40","hashOfConfig":"30"},{"size":2880,"mtime":1647421268490,"results":"41","hashOfConfig":"30"},{"size":5284,"mtime":1647376955135,"results":"42","hashOfConfig":"30"},{"size":5397,"mtime":1647378866898,"results":"43","hashOfConfig":"30"},{"size":4088,"mtime":1647328043258,"results":"44","hashOfConfig":"30"},{"size":1083,"mtime":1647328043258,"results":"45","hashOfConfig":"30"},{"size":2527,"mtime":1647423149891,"results":"46","hashOfConfig":"30"},{"size":3093,"mtime":1647328043258,"results":"47","hashOfConfig":"30"},{"size":972,"mtime":1647378076015,"results":"48","hashOfConfig":"30"},{"size":472,"mtime":1647328043258,"results":"49","hashOfConfig":"30"},{"size":1333,"mtime":1647328043258,"results":"50","hashOfConfig":"30"},{"size":994,"mtime":1647328043258,"results":"51","hashOfConfig":"30"},{"size":1169,"mtime":1647381937032,"results":"52","hashOfConfig":"30"},{"size":1064,"mtime":1647328043258,"results":"53","hashOfConfig":"30"},{"size":2137,"mtime":1647415311948,"results":"54","hashOfConfig":"30"},{"size":1966,"mtime":1647377758090,"results":"55","hashOfConfig":"30"},{"size":663,"mtime":1647379112210,"results":"56","hashOfConfig":"30"},{"size":1073,"mtime":1647328043258,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1yilyjn",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\index.tsx",[],["116","117"],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\utils\\utils.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\App.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\EnterName.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Config.tsx",["118","119"],"import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport ConfigTable from \"./ConfigTable\";\r\nimport Player from \"./Player\";\r\nimport ReadyPlayers from \"./ReadyPlayers\";\r\nimport Snackbar from \"./Snackbar\";\r\nimport Walkthrough from \"./Walkthrough\";\r\nimport Modal from \"react-modal\";\r\nimport Toast from \"./Toast\";\r\n\r\nconst customModalStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    backgroundColor: \"rgb(228 235 245 / 72%)\",\r\n    padding: '4rem',\r\n    boxShadow: \"0.8rem 0.8rem 1.4rem #c8d0e7, -0.2rem -0.2rem 1.8rem #ffffff\",\r\n    border: 0\r\n  },\r\n  overlay: {\r\n    backgroundColor: \"rgba(255, 255, 255, 0.35)\",\r\n    transition: \"all 1s\",\r\n    backdropFilter: 'blur(8px)'\r\n  },\r\n};\r\n\r\nexport interface Award {\r\n  // Actual type information:\r\n  // {\r\n  //    nameAward: string;\r\n  //    numAward: string;\r\n  // }\r\n  [index: string]: string;\r\n}\r\n\r\nexport interface PcStatus {\r\n  user: User;\r\n  ready: boolean;\r\n  numTickets: number;\r\n}\r\n\r\nexport interface User {\r\n  username: string;\r\n  id: string;\r\n  room: string;\r\n}\r\n\r\ninterface ConfigProps {\r\n  socket: any;\r\n  name: string;\r\n}\r\n\r\ninterface ConfigState {\r\n  type: string;\r\n\r\n  // Config\r\n  readyHost: boolean;\r\n  readyClient: boolean;\r\n\r\n  //  Host Config State options\r\n  awards: Award[];\r\n\r\n  //  PC Config State options\r\n  numHouses: number;\r\n\r\n  // List of players who are ready to play\r\n  PcsStatus: PcStatus[];\r\n\r\n  // notification for host disconnected\r\n  hostDisconnected: boolean;\r\n\r\n  // For warning modal which opens when host hits start game if some player is not ready\r\n  isModalOpen: boolean;\r\n\r\n  // When host tries to start game when there is no one in the game room\r\n  isToastOpen: boolean;\r\n\r\n  // when arrive on host screen, ask the user if they want to see tutorial or not\r\n  watchTutorialModal: boolean\r\n\r\n  // passed to child components to let them know if user selected to watch the tutorial or not\r\n  runWalkthrough: boolean\r\n  //\r\n  hasGameAlreadyStarted: boolean;\r\n}\r\n\r\nclass Config extends Component<ConfigProps, ConfigState> {\r\n  // For the toast component to hide initially and not add animation on initial render\r\n  hideToastInitially: boolean;\r\n  constructor(props: ConfigProps) {\r\n    super(props);\r\n    this.state = {\r\n      type: \"\",\r\n      numHouses: 1,\r\n      readyHost: false,\r\n      readyClient: false,\r\n      PcsStatus: [],\r\n      isModalOpen: false,\r\n      isToastOpen: false,\r\n      watchTutorialModal: true,\r\n      runWalkthrough: false,\r\n      hasGameAlreadyStarted: false,\r\n      awards: [\r\n        {\r\n          nameAward: \"First Line\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Second Line\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Third Line\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Corners\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Full House\",\r\n          numAward: \"1\",\r\n        },\r\n      ],\r\n      hostDisconnected: false,\r\n    };\r\n    this.hideToastInitially = true;\r\n  }\r\n\r\n  // Only handles on host's config when he presses start game button.\r\n  handlleHostConfigDone = () => {\r\n    if (this.state.isModalOpen) {\r\n      this.setState({ isModalOpen: false });\r\n    }\r\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\r\n    console.log(\"config submitted from host\", this.state.awards);\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Extracting roomID from the URL\r\n    let roomID = window.location.pathname.substr(\r\n      window.location.pathname.lastIndexOf(\"/\") + 1\r\n    );\r\n\r\n    // asking server to join room\r\n    this.props.socket.emit(\"joinRoom\", {\r\n      room: roomID,\r\n      username: this.props.name,\r\n    });\r\n\r\n    // check if the game has already started or not\r\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\r\n      this.setState({ hasGameAlreadyStarted: true });\r\n    });\r\n\r\n    // server response: player gets know if he is host or pc\r\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any) => {\r\n      this.setState({\r\n        type: playerTypeObj.type, // pass this type to player as well\r\n      });\r\n\r\n      // Receiving event on Host from new PC who has joined and sending them\r\n      // the list of readyPlayers\r\n      if (playerTypeObj.type === \"Host\") {\r\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\r\n          let PcsStatus = this.state.PcsStatus;\r\n          let newPcStatus: PcStatus = {\r\n            user: user,\r\n            ready: false,\r\n            numTickets: 0,\r\n          };\r\n          PcsStatus.push(newPcStatus);\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n\r\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\r\n          // Find user in array and make him ready\r\n          let PcsStatus = this.state.PcsStatus;\r\n          for (let i = 0; i < PcsStatus.length; ++i) {\r\n            if (PcsStatus[i].user.id === user.id) {\r\n              PcsStatus[i].ready = true;\r\n              PcsStatus[i].numTickets = numTickets;\r\n            }\r\n          }\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n\r\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\r\n          // dealing with ready/not ready\r\n          let PcsStatus = this.state.PcsStatus;\r\n          for (let i = 0; i < PcsStatus.length; ++i) {\r\n            if (PcsStatus[i].user.id === user.id) {\r\n              // Remove this user from PcsStatus\r\n              PcsStatus.splice(i, 1);\r\n            }\r\n          }\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n      }\r\n    });\r\n\r\n    // server sending awards from Host as Host is ready\r\n    this.props.socket.on(\"HostConfigDone\", (awards: any) => {\r\n      this.setState({\r\n        awards: awards,\r\n        readyHost: true,\r\n      });\r\n    });\r\n\r\n    // Know the status of all the players if someone new joined or got ready\r\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\r\n      this.setState({ PcsStatus: PcsStatus });\r\n    });\r\n\r\n    // Host disconnect\r\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\r\n      console.log(userHost, \": host disconnected\");\r\n      this.setState({\r\n        hostDisconnected: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  // For Host Config\r\n  handleChangeHost = (idx: number) => (e: any) => {\r\n    const eTarget = e.target;\r\n    let name: string = eTarget.name;\r\n    let value: string = eTarget.value;\r\n\r\n    const awards = this.state.awards;\r\n\r\n    awards[idx][name] = value;\r\n\r\n    this.setState({\r\n      awards,\r\n    });\r\n  };\r\n  handleAddRow = () => {\r\n    const item = {\r\n      nameAward: \"\",\r\n      numAward: \"\",\r\n    };\r\n    this.setState({\r\n      awards: [...this.state.awards, item],\r\n    });\r\n  };\r\n  handleRemoveRow = () => {\r\n    this.setState({\r\n      awards: this.state.awards.slice(0, -1),\r\n    });\r\n  };\r\n  handleRemoveSpecificRow = (idx: number) => () => {\r\n    const awards = [...this.state.awards];\r\n    awards.splice(idx, 1);\r\n    this.setState({ awards });\r\n  };\r\n\r\n  // For PC Config\r\n  handleChangePC = (event: any) => {\r\n    const { value } = event.target;\r\n    if (this.state.type === \"PC\") {\r\n      // sanity check\r\n      this.setState({\r\n        numHouses: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  // common function for Host and PC Config\r\n  handleSubmit = (event: any) => {\r\n    this.setState({\r\n      readyClient: true,\r\n    });\r\n    if (this.state.type === \"Host\") {\r\n      // start the game only when there are actual players in the game\r\n      if (this.state.PcsStatus.length > 0) {\r\n        // checking if all the players are ready\r\n        let isEveryOneReady = true;\r\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\r\n          if (!this.state.PcsStatus[i].ready) {\r\n            isEveryOneReady = false;\r\n            continue;\r\n          }\r\n        }\r\n        if (isEveryOneReady) {\r\n          this.handlleHostConfigDone();\r\n        } else {\r\n          this.setState({ isModalOpen: true });\r\n        }\r\n      } else {\r\n        // To make the toast visible\r\n        this.hideToastInitially = false;\r\n        this.setState({ isToastOpen: true });\r\n      }\r\n    } else if (this.state.type === \"PC\") {\r\n      //let everyone know that i am ready. Backend knows who I am by socket.id\r\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  loopfun = (val: number) => {\r\n    const array = [];\r\n    for (let i = 0; i < val; i++) {\r\n      array.push(<li></li>)\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    // game is over if there is no host\r\n    if (this.state.hostDisconnected) {\r\n      return (\r\n        <div className=\"nohostleft\">\r\n          <h1 className=\"host-configuration\">\r\n            Host left the game. Please close this tab. Generate a new room if\r\n            you want to play more.\r\n          </h1>\r\n          <a href=\"/\" className=\"linkbtn\">\r\n            <button className=\"btn\">Back</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // If new playerjoins in already started game or host becomes ready (starts the game)\r\n    // this pc is not ready, let him know that he cannot play now in this game\r\n    if (\r\n      this.state.hasGameAlreadyStarted ||\r\n      (this.state.readyHost && !this.state.readyClient)\r\n    ) {\r\n      return (\r\n        <div className=\"gamestartedplaynext\">\r\n          <h1 className=\"host-configuration\">\r\n            This game was started without you. You can play in the next game.\r\n            Meanwhile you can go back to the home screen and play another game\r\n            :)\r\n          </h1>\r\n          <a href=\"/\" className=\"linkbtn\">\r\n            <button className=\"btn\">Home</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let mainComponent = null;\r\n    if (this.state.readyHost && this.state.readyClient) {\r\n      // display player\r\n      mainComponent = (\r\n        <Player\r\n          socket={this.props.socket}\r\n          numHouses={this.state.numHouses}\r\n          name={this.props.name}\r\n          type={this.state.type}\r\n          awards={this.state.awards}\r\n          runWalkthrough={this.state.runWalkthrough}\r\n        />\r\n      );\r\n    } else if (this.state.type === \"Host\") {\r\n      // form for host configuration\r\n      //    Choosing Awards\r\n      // pass handleSubmit as a prop\r\n\r\n      mainComponent = (\r\n        <div className=\"config-container\">\r\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough} />\r\n          <Snackbar\r\n            message=\"Share this 'join code' with other players\"\r\n            actionText=\"Copy code\"\r\n          />\r\n          <Toast\r\n            message={\"There are no players in the game right now\"}\r\n            isShown={this.state.isToastOpen}\r\n            handleClose={() => {\r\n              this.setState({ isToastOpen: false });\r\n            }}\r\n            initiallyHidden={this.hideToastInitially}\r\n          />\r\n          {\r\n            this.state.isModalOpen ? <div modal-status={this.state.watchTutorialModal} className=\"modalpoppup\">\r\n              <div className=\"area\" >\r\n                <ul className=\"circles\">\r\n                  {this.loopfun(10)}\r\n                </ul>\r\n              </div >\r\n              <div className=\"modalpoppupcontent\">\r\n                <h3 style={{ color: \"#000000\" }}>Some players are still not ready.</h3>\r\n                <h3 style={{ color: \"#000000\" }}>Are you sure you want to start the game?</h3>\r\n                <div className=\"modal-buttons\">\r\n                  <button style={{ margin: 5 }} className=\"btn btn__primary\" onClick={this.handlleHostConfigDone}>Yes</button>\r\n                  <button\r\n                    style={{ margin: 5 }}\r\n                    className=\"btn\"\r\n                    onClick={() => {\r\n                      this.setState({ isModalOpen: false });\r\n                    }}\r\n                  >\r\n                    No\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div> : null\r\n          }\r\n          <h1 className=\"host-configuration\">Game Setup</h1>\r\n          <ConfigTable\r\n            awards={this.state.awards}\r\n            handleChangeHost={this.handleChangeHost}\r\n            handleAddRow={this.handleAddRow}\r\n            handleRemoveRow={this.handleRemoveRow}\r\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\r\n            handleSubmit={this.handleSubmit}\r\n          />\r\n          <ReadyPlayers players={this.state.PcsStatus} />\r\n        </div>\r\n      );\r\n    } else if (this.state.type === \"PC\") {\r\n      // form for PC configuration\r\n      //    Number of Tickets\r\n      mainComponent = (\r\n        <div className=\"config-container\">\r\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough} />\r\n          <h1 className=\"pc-configuration\">Player Setup</h1>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <table className=\"config-table\" id=\"pc-config-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"number-tickets\">Number of Tickets:</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      max=\"6\"\r\n                      min=\"1\"\r\n                      value={this.state.numHouses}\r\n                      onChange={this.handleChangePC}\r\n                      required\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"waiting-message-tickets\">Waiting for host to start the game</td>\r\n                  <td>\r\n                    <button className=\"ready btn btn__primary\" type=\"submit\">\r\n                      Ready\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </form>\r\n          <ReadyPlayers players={this.state.PcsStatus} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n\r\n        {mainComponent}\r\n        {\r\n          this.state.watchTutorialModal ? <div modal-status={this.state.watchTutorialModal} className=\"modalpoppup\">\r\n            <div className=\"area\" >\r\n              <ul className=\"circles\">\r\n                {this.loopfun(10)}\r\n              </ul>\r\n            </div >\r\n            <div className=\"modalpoppupcontent\">\r\n              <h3 style={{ color: \"#000000\" }}>Would you like to watch tutorial?</h3>\r\n              <div className=\"modal-buttons\">\r\n                <button style={{ margin: 5 }} className=\"btn btn__primary\" onClick={() => {\r\n                  this.setState({ runWalkthrough: true, watchTutorialModal: false })\r\n                  console.log(\"clicked yes\");\r\n                }\r\n                }>Yes</button>\r\n                <button\r\n                  style={{ margin: 5 }}\r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                    console.log(\"clicked No\");\r\n                    this.setState({ runWalkthrough: false, watchTutorialModal: false });\r\n                  }}\r\n                >\r\n                  No\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n        }\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Config;\r\n","D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ConfigTable.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ReadyPlayers.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Snackbar.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Player.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Walkthrough.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Toast.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\PcTicket.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Board.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Prizes.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\MultipleHostTickets.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Ticket.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\NewNumber.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Notification.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\WinningButtons.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\BoardLine.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\HostTicket.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Waiting.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Timer.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\House.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\GoneNumbers.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Box.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\ResultButtons.tsx",[],"D:\\HOUSIE_APP-NODE-react\\tambola\\frontend\\src\\components\\Line.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":8,"column":8,"nodeType":"126","messageId":"127","endLine":8,"endColumn":13},{"ruleId":"124","severity":1,"message":"128","line":11,"column":7,"nodeType":"126","messageId":"127","endLine":11,"endColumn":24},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'customModalStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]