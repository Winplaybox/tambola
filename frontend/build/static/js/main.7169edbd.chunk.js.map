{"version":3,"sources":["utils/utils.tsx","components/ConfigTable.tsx","components/Box.tsx","components/BoardLine.tsx","components/Notification.tsx","components/Waiting.tsx","components/Timer.tsx","components/Board.tsx","components/Line.tsx","components/House.tsx","components/Ticket.tsx","components/WinningButtons.tsx","components/GoneNumbers.tsx","components/NewNumber.tsx","components/PcTicket.tsx","components/ResultButtons.tsx","components/HostTicket.tsx","components/MultipleHostTickets.tsx","components/Prizes.tsx","components/Walkthrough.tsx","components/Player.tsx","components/ReadyPlayers.tsx","components/Snackbar.tsx","components/Toast.tsx","components/Config.tsx","components/EnterName.tsx","components/App.tsx","index.tsx"],"names":["getRandom","min","max","Math","floor","random","getNumberOfElementsInSet","set","count","i","length","getRowCount","house","rowIndex","putElements","j","counter","columnIndicesWithTwoNums","push","lenColumnsWithTwoNums","randomColumnIndexInArray","actualRandomColumnIndex","indices","splice","randomIndex","generateTicket","numHouses","sets","col1","col2","col3","col4","col5","col6","col7","col8","col9","columns","set1","set2","set3","set4","set5","set6","col","randomNumIndex","randomNum","lastCol","pass","vacantSetFound","randomSet","sort","a","b","generate","fullTicket","houses","houseNo","rowNo","console","log","getEmptyFullTicket","finalTicket","row","k","value","check","doNotLeavePage","event","preventDefault","returnValue","ConfigTable","props","onSubmit","handleSubmit","className","awards","map","item","idx","key","type","name","placeholder","nameAward","onChange","handleChangeHost","numAward","onClick","handleRemoveSpecificRow","xmlns","viewBox","d","handleAddRow","Box","clickHandler","invertCheck","state","setState","undefined","changeTicketState","index","prevProps","this","checkedCssClass","Component","BoardLine","boxes","numbers","number","Notification","reward","deleteNotification","notificationObj","ticketBoardContainer","document","getElementById","setAttribute","socket","on","callWinObj","rewardMe","setTimeout","resultsObj","obj","notificationComp","result","callWinType","calledWinUsername","user","username","getUserName","ref","config","elementCount","angle","spread","decay","lifetime","Waiting","message","playerType","React","Timer","interval","updateTimer","prevSeconds","seconds","endGame","hasGameEnded","setInterval","clearInterval","createNumbersLine","n","generateAllBoardNumbers","Board","handleNewNumber","newNumber","columnNumber","rowNum","allBoardNumbers","goneNumbers","boardNumbersArray","x","shuffle","createArray","shuffledBoardNumbers","showTimer","generateNewButton","querySelector","disabled","classList","add","timer","allLines","generateAllLines","emit","id","Line","callback","generateBoxComponents","boxIndex","House","lineIndex","houseIndex","houseNumbers","Ticket","ticket","WinningButtons","awardButtons","winCallBack","GoneNumbers","isShown","mainComp","button","window","getComputedStyle","getPropertyValue","style","display","innerHTML","NewNumber","generateRandomKey","newNumberObj","href","color","textDecoration","title","height","width","fill","PcTicket","handleWinningCall","winningButtons","ResultButtons","resultCallback","win","bogey","HostTicket","playerTicket","userCalledForWin","removeTicketFromHost","MultipleHostTicket","hasWalkthroughShown","walkThroughSteps","target","content","disableBeacon","placement","disableOverlay","removeTicket","idWinCall","newState","ticketFromPlayers","Object","keys","constructor","remove","runWalkthrough","showWalkthrough","newTicketsState","ticketComponents","entries","steps","run","continuous","disableOverlayClose","showProgress","showSkipButton","spotlightClicks","styles","options","zIndex","primaryColor","textColor","Prizes","remainingAwards","whoWonWhat","parseInt","winningButton","anyAwardsLeft","currAwards","currWhoWonWhat","currNumAward","toString","zeroAwardsLeft","whoWonComp","tiedPlayers","hasOwnProperty","join","prizeComp","Walkthrough","diffTypeSteps","configHostSteps","PC","Host","game","tutorialType","Player","ticketFromPlayer","winningCallFromPlayer","removeEventListener","timesRun","mainComponent","gameOverP","gameEndedCssClass","ReadyPlayers","checkMark","playersComp","waitingMessage","players","numTickets","ready","marginLeft","Snackbar","handleCopyUrl","dummy","createElement","curUrl","location","pathname","split","body","appendChild","select","execCommand","removeChild","hidden","animation","actionText","Toast","displayStyle","initiallyHidden","handleClose","Config","hideToastInitially","handlleHostConfigDone","isModalOpen","e","eTarget","handleRemoveRow","slice","handleChangePC","readyClient","PcsStatus","isEveryOneReady","isToastOpen","loopfun","val","array","readyHost","watchTutorialModal","hasGameAlreadyStarted","hostDisconnected","roomID","substr","lastIndexOf","room","playerTypeObj","newPcStatus","userHost","modal-status","margin","required","EnterName","handleChange","isEmpty","handleKeyPress","submitted","myStyles","visibility","submitButton","onKeyPress","spellCheck","autoFocus","App","io","addEventListener","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7169edbd.chunk.js","sourcesContent":["import { BoxState } from \"../components/Box\";\r\n\r\nfunction getRandom(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction getNumberOfElementsInSet(set: Array<Array<number>>) {\r\n  let count = 0;\r\n  for (let i = 0; i < set.length; ++i) {\r\n    count = count + set[i].length;\r\n  }\r\n  return count;\r\n}\r\n\r\nfunction getRowCount(house: Array<Array<number>>, rowIndex: number) {\r\n  let count = 0;\r\n  for (let i = 0; i < house[rowIndex].length; ++i) {\r\n    if (house[rowIndex][i] !== 0) ++count;\r\n  }\r\n  return count;\r\n}\r\n\r\nfunction getEmptyFullTicket(): Array<Array<Array<number>>> {\r\n  let houses = [];\r\n  for (let houseNo = 0; houseNo < 6; ++houseNo) {\r\n    let house = [];\r\n    for (let rowNo = 0; rowNo < 3; ++rowNo) {\r\n      let row = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      house.push(row);\r\n    }\r\n    houses[houseNo] = house;\r\n  }\r\n  console.log(\"houses\", houses);\r\n  return houses;\r\n}\r\n\r\nfunction generate() {\r\n  let col1: Array<number> = [],\r\n    col2: Array<number> = [],\r\n    col3: Array<number> = [],\r\n    col4: Array<number> = [],\r\n    col5: Array<number> = [],\r\n    col6: Array<number> = [],\r\n    col7: Array<number> = [],\r\n    col8: Array<number> = [],\r\n    col9: Array<number> = [];\r\n\r\n  for (let i = 1; i <= 9; ++i) {\r\n    col1.push(i);\r\n  }\r\n  for (let i = 10; i <= 19; ++i) {\r\n    col2.push(i);\r\n  }\r\n  for (let i = 20; i <= 29; ++i) {\r\n    col3.push(i);\r\n  }\r\n  for (let i = 30; i <= 39; ++i) {\r\n    col4.push(i);\r\n  }\r\n  for (let i = 40; i <= 49; ++i) {\r\n    col5.push(i);\r\n  }\r\n  for (let i = 50; i <= 59; ++i) {\r\n    col6.push(i);\r\n  }\r\n  for (let i = 60; i <= 69; ++i) {\r\n    col7.push(i);\r\n  }\r\n  for (let i = 70; i <= 79; ++i) {\r\n    col8.push(i);\r\n  }\r\n  for (let i = 80; i <= 90; ++i) {\r\n    col9.push(i);\r\n  }\r\n\r\n  let columns: Array<Array<number>> = [\r\n    col1,\r\n    col2,\r\n    col3,\r\n    col4,\r\n    col5,\r\n    col6,\r\n    col7,\r\n    col8,\r\n    col9,\r\n  ];\r\n\r\n  let set1: Array<Array<number>> = [],\r\n    set2: Array<Array<number>> = [],\r\n    set3: Array<Array<number>> = [],\r\n    set4: Array<Array<number>> = [],\r\n    set5: Array<Array<number>> = [],\r\n    set6: Array<Array<number>> = [];\r\n\r\n  for (let i = 0; i < 9; ++i) {\r\n    set1.push([]);\r\n    set2.push([]);\r\n    set3.push([]);\r\n    set4.push([]);\r\n    set5.push([]);\r\n    set6.push([]);\r\n  }\r\n\r\n  let sets: Array<Array<Array<number>>> = [set1, set2, set3, set4, set5, set6];\r\n\r\n  //   add 6 numbers from each column to each of the sets\r\n  for (let i = 0; i < 9; ++i) {\r\n    let col = columns[i];\r\n    for (let j = 0; j < 6; ++j) {\r\n      let randomNumIndex = getRandom(0, col.length - 1);\r\n      let randomNum = col[randomNumIndex];\r\n      let set = sets[j][i];\r\n      set.push(randomNum);\r\n      col.splice(randomNumIndex, 1);\r\n    }\r\n  }\r\n\r\n  //   // Assign 1 element of last col to a random set\r\n  let lastCol = columns[columns.length - 1];\r\n  let randomNumIndex = getRandom(0, lastCol.length - 1);\r\n  let randomNum = lastCol[randomNumIndex];\r\n  let randomSetIndex = getRandom(0, sets.length - 1);\r\n  let randomSet = sets[randomSetIndex][8];\r\n  randomSet.push(randomNum);\r\n  lastCol.splice(randomNumIndex, 1);\r\n\r\n  //   // 3 Passes over the columns\r\n  for (let pass = 0; pass < 3; ++pass) {\r\n    for (let j = 0; j < 9; ++j) {\r\n      let col = columns[j];\r\n      if (col.length === 0) continue;\r\n      let randomNumIndex = getRandom(0, col.length - 1);\r\n      let randomNum = col[randomNumIndex];\r\n      let vacantSetFound = false;\r\n      while (vacantSetFound === false) {\r\n        let randomSetIndex = getRandom(0, sets.length - 1);\r\n        let randomSet = sets[randomSetIndex];\r\n        if (\r\n          getNumberOfElementsInSet(randomSet) === 15 ||\r\n          randomSet[j].length === 2\r\n        )\r\n          continue;\r\n\r\n        vacantSetFound = true;\r\n        randomSet[j].push(randomNum);\r\n        col.splice(randomNumIndex, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  //   // Last pass\r\n  for (let j = 0; j < 9; ++j) {\r\n    let col = columns[j];\r\n    if (col.length === 0) continue;\r\n    let randomNumIndex = getRandom(0, col.length - 1);\r\n    let randomNum = col[randomNumIndex];\r\n    let vacantSetFound = false;\r\n    while (vacantSetFound === false) {\r\n      let randomSetIndex = getRandom(0, sets.length - 1);\r\n      let randomSet = sets[randomSetIndex];\r\n      if (\r\n        getNumberOfElementsInSet(randomSet) === 15 ||\r\n        randomSet[j].length === 3\r\n      )\r\n        continue;\r\n\r\n      vacantSetFound = true;\r\n      randomSet[j].push(randomNum);\r\n      col.splice(randomNumIndex, 1);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 6; ++i) {\r\n    for (let j = 0; j < 9; ++j) {\r\n      sets[i][j].sort((a, b) => {\r\n        return a - b;\r\n      });\r\n    }\r\n  }\r\n\r\n  return sets;\r\n}\r\n\r\nfunction putElements(set: Array<Array<number>>, house: Array<Array<number>>) {\r\n  for (let i = 0; i < 9; ++i) {\r\n    // Put the row which have three numbers\r\n    if (set[i].length === 3)\r\n      for (let j = 0; j < 3; ++j) {\r\n        house[j][i] = set[i][j];\r\n      }\r\n  }\r\n\r\n  // // Now the cases where the column will have two numbers;\r\n  let counter = 0;\r\n  let columnIndicesWithTwoNums = [];\r\n  for (let i = 0; i < 9; ++i) {\r\n    if (set[i].length === 2) {\r\n      columnIndicesWithTwoNums.push(i);\r\n    }\r\n  }\r\n  let lenColumnsWithTwoNums = columnIndicesWithTwoNums.length;\r\n  for (let i = 0; i < lenColumnsWithTwoNums; ++i) {\r\n    let randomColumnIndexInArray = getRandom(\r\n      0,\r\n      columnIndicesWithTwoNums.length - 1\r\n    );\r\n    let actualRandomColumnIndex =\r\n      columnIndicesWithTwoNums[randomColumnIndexInArray];\r\n    let preComp = [\r\n      [0, 1],\r\n      [0, 2],\r\n      [1, 2],\r\n    ];\r\n    let indices = preComp[counter % 3];\r\n    house[indices[0]][actualRandomColumnIndex] =\r\n      set[actualRandomColumnIndex][0];\r\n    house[indices[1]][actualRandomColumnIndex] =\r\n      set[actualRandomColumnIndex][1];\r\n    columnIndicesWithTwoNums.splice(randomColumnIndexInArray, 1);\r\n    ++counter;\r\n  }\r\n\r\n  // Cases where column will have 1 number\r\n  for (let i = 0; i < 9; ++i) {\r\n    if (set[i].length === 1) {\r\n      let randomIndex = getRandom(0, 2);\r\n      while (\r\n        house[randomIndex][i] !== 0 ||\r\n        getRowCount(house, randomIndex) === 5\r\n      ) {\r\n        randomIndex = getRandom(0, 2);\r\n      }\r\n      // found the rowNo for this number\r\n      house[randomIndex][i] = set[i][0];\r\n    }\r\n  }\r\n  return house;\r\n}\r\n\r\nfunction generateTicket(numHouses: number) {\r\n  // Full ticket of numbers get generated i.e. 6 houses\r\n  let sets = generate();\r\n  let fullTicket = getEmptyFullTicket();\r\n  for (let i = 0; i < numHouses; ++i) {\r\n    putElements(sets[i], fullTicket[i]);\r\n  }\r\n  let finalTicket: Array<Array<Array<BoxState>>> = [];\r\n  for (let i = 0; i < numHouses; ++i) {\r\n    let house: Array<Array<BoxState>> = [];\r\n    for (let j = 0; j < 3; ++j) {\r\n      let row: Array<BoxState> = [];\r\n      for (let k = 0; k < 9; ++k) {\r\n        row[k] = { value: fullTicket[i][j][k], check: false };\r\n      }\r\n      house[j] = row;\r\n    }\r\n    finalTicket[i] = house;\r\n  }\r\n  return finalTicket;\r\n}\r\n\r\nlet doNotLeavePage = (event: any) => {\r\n  // Custom message is not working, considererd as security threat;\r\n  // Event listener gets removed when the game\r\n  event.preventDefault();\r\n  event.returnValue =\r\n    \"All the game state will be lost. Are you sure you want to leave?\";\r\n  return \"All the game state will be lost. Are you sure you want to leave?\";\r\n};\r\n\r\nexport { generateTicket, doNotLeavePage };\r\n","import React from \"react\";\r\nimport { Award } from \"./Config\";\r\n\r\ninterface ConfigTableProps {\r\n  awards: Award[];\r\n\r\n  // form functions\r\n  handleChangeHost: (idx: number) => (e: any) => void;\r\n  handleAddRow: () => void;\r\n  handleRemoveRow: () => void;\r\n  handleRemoveSpecificRow: (idx: number) => () => void;\r\n  handleSubmit: (event: any) => void;\r\n}\r\n\r\nfunction ConfigTable(props: ConfigTableProps) {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <table className=\"config-table\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"award-name-heading\"> Award Name </th>\r\n            <th className=\"award-number-heading\"> How Many? </th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.awards.map((item, idx) => (\r\n            <tr key={idx}>\r\n              <td className=\"award-name\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"nameAward\"\r\n                  placeholder=\"Enter Award Name\"\r\n                  value={props.awards[idx].nameAward}\r\n                  onChange={props.handleChangeHost(idx)}\r\n                />\r\n              </td>\r\n              <td className=\"award-number\">\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"numAward\"\r\n                  placeholder=\"Enter Number of Awards\"\r\n                  min=\"1\"\r\n                  value={props.awards[idx].numAward}\r\n                  onChange={props.handleChangeHost(idx)}\r\n                />\r\n              </td>\r\n              <td className=\"cross-button\">\r\n                <button\r\n                  className=\"btn\"\r\n                  type=\"button\"\r\n                  onClick={props.handleRemoveSpecificRow(idx)}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon s-ion-icon\" viewBox=\"0 0 512 512\"><path d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"></path></svg>\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"buttons-container\">\r\n        <button className=\"add-row btn btn__primary\" type=\"button\" onClick={props.handleAddRow}>\r\n          Add Award\r\n        </button>\r\n        <button className=\"start-game btn\" type=\"submit\">\r\n          Start Game\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ConfigTable;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\n// TODO: May be we can just remove the state in this component as whatever we need is in the props\r\n// This is the component which is used by both BoardLine and also Line (ticket Line)\r\n\r\ninterface BoxProps {\r\n  value: number;\r\n\r\n  // Optional because BoardLine does not pass this, but\r\n  // for generation of ticket it is passed;\r\n  index?: number;\r\n  check?: boolean;\r\n  changeTicketState?: (index: number, check: boolean) => void;\r\n}\r\n\r\nexport interface BoxState {\r\n  value: number;\r\n  check: boolean;\r\n}\r\n\r\nclass Box extends Component<BoxProps, BoxState> {\r\n  constructor(props: BoxProps) {\r\n    super(props);\r\n    this.state = {\r\n      value: this.props.value,\r\n      check: this.props.check === undefined ? false : this.props.check,\r\n    };\r\n  }\r\n  clickHandler = () => {\r\n    let invertCheck = this.state.check ? false : true;\r\n    this.setState({ check: invertCheck, value: this.state.value });\r\n\r\n    // Change house's state when clicked, only on ticket and not on board\r\n    if (\r\n      this.props.changeTicketState !== undefined &&\r\n      this.props.index !== undefined\r\n    ) {\r\n      this.props.changeTicketState(this.props.index, invertCheck);\r\n    }\r\n  };\r\n\r\n  // This is only for the newNumber generated in the board sends new props to the box\r\n  // to make it mark itself\r\n  componentDidUpdate(prevProps: BoxProps) {\r\n    if (prevProps.check !== this.props.check && this.props.check) {\r\n      this.setState({ check: this.props.check });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let checkedCssClass = this.state.check ? \"checked\" : \"unchecked\";\r\n    return (\r\n      <div className={`box ${this.state.check ? \"boxchecked\" : \"boxunchecked\"}`} onClick={this.clickHandler}>\r\n        <div className={checkedCssClass}></div>\r\n        <div className={checkedCssClass}></div>\r\n        <p>{this.props.value === 0 ? \"\" : this.props.value}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","import * as React from \"react\";\r\nimport { FunctionComponent } from \"react\";\r\nimport Box, { BoxState } from \"./Box\";\r\n\r\ninterface BoardLineProps {\r\n  index: number;\r\n  numbers: Array<BoxState>;\r\n}\r\n\r\nexport let BoardLine: FunctionComponent<BoardLineProps> = ({\r\n  numbers,\r\n}: BoardLineProps) => {\r\n  let boxes = numbers.map(function (number) {\r\n    return <Box value={number.value} check={number.check} />;\r\n  });\r\n  return <div className=\"board-line\">{boxes}</div>;\r\n};\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { callWin, resultObj } from \"./Player\";\r\nimport Reward from \"react-rewards\";\r\n\r\n// Important: To make the notifications to appear properly and rewards to work properly\r\n// The parent div should have position: relative\r\n\r\ninterface NotificationProps {\r\n  socket: any;\r\n  type: string;\r\n}\r\n\r\ninterface NotificationState {\r\n  notificationObj: callWin | resultObj | null;\r\n}\r\n\r\nfunction getUserName(obj: any) {\r\n  return obj.calledWinUsername || obj.user.username;\r\n}\r\n\r\nfunction getMainHeading(obj: any) {\r\n  let mainHeading;\r\n  if (obj.result !== undefined) {\r\n    // this is result Obj\r\n    mainHeading = obj.result + \" \" + obj.callWinType;\r\n  } else {\r\n    mainHeading = \"Call: \" + obj.callWinType;\r\n  }\r\n  return mainHeading;\r\n}\r\n\r\nclass Notification extends Component<NotificationProps, NotificationState> {\r\n  reward: any;\r\n  constructor(props: NotificationProps) {\r\n    super(props);\r\n    this.state = { notificationObj: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ticketBoardContainer = document.getElementById(\r\n      \"ticket-board-container\"\r\n    );\r\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\r\n      this.reward.rewardMe();\r\n      this.setState({ notificationObj: callWinObj });\r\n      ticketBoardContainer?.setAttribute(\"style\", \"opacity:0.2;\");\r\n\r\n      // callWinToHost notification gets deleted after 5seconds on everyone's screen\r\n      setTimeout(() => {\r\n        this.deleteNotification();\r\n      }, 5000);\r\n    });\r\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\r\n      this.reward.rewardMe();\r\n      this.setState({ notificationObj: resultsObj });\r\n      ticketBoardContainer?.setAttribute(\"style\", \"opacity:0.2;\");\r\n\r\n      // Result notification gets deleted after 5seconds on everyone's screen\r\n      setTimeout(() => {\r\n        this.deleteNotification();\r\n      }, 5000);\r\n    });\r\n  }\r\n\r\n  deleteNotification = () => {\r\n    this.setState({ notificationObj: null });\r\n    let ticketBoardContainer = document.getElementById(\r\n      \"ticket-board-container\"\r\n    );\r\n    if (ticketBoardContainer)\r\n      ticketBoardContainer.setAttribute(\"style\", \"opacity: 1\");\r\n  };\r\n\r\n  render() {\r\n    let notificationComp = this.state.notificationObj ? (\r\n      <div className=\"notification-container\">\r\n        <div className=\"notification\">\r\n          <p className=\"main animated rubberBand\">\r\n            {getMainHeading(this.state.notificationObj)}\r\n          </p>\r\n          <p className=\"sub animated bounce\">\r\n            {getUserName(this.state.notificationObj)}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n    return (\r\n      <>\r\n        {notificationComp}\r\n        <Reward\r\n          ref={(ref: any) => {\r\n            this.reward = ref;\r\n          }}\r\n          type=\"confetti\"\r\n          config={{\r\n            elementCount: 100,\r\n            angle: 90,\r\n            spread: 90,\r\n            decay: 0.95,\r\n            lifetime: 150,\r\n          }}\r\n        ></Reward>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Notification;\r\n","import * as React from \"react\";\r\nimport { callWin } from \"./Player\";\r\n\r\nexport interface WaitingProps {\r\n  playerType: string;\r\n  socket: any;\r\n}\r\n\r\nexport interface WaitingState {\r\n  message: string;\r\n}\r\n\r\nclass Waiting extends React.Component<WaitingProps, WaitingState> {\r\n  constructor(props: WaitingProps) {\r\n    super(props);\r\n    this.state = { message: \"\" };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\r\n      if (this.props.playerType === \"Host\") {\r\n        this.setState({\r\n          message: \"Other players are waiting on you to check tickets\",\r\n        });\r\n      } else {\r\n        this.setState({\r\n          message: \"Waiting for host to check the player tickets\",\r\n        });\r\n      }\r\n    });\r\n\r\n    this.props.socket.on(\"hostCompletedChecking\", () => {\r\n      this.setState({ message: \"\" });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <p className=\"waiting\">{this.state.message}</p>;\r\n  }\r\n}\r\n\r\nexport default Waiting;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\ninterface TimerProps {\r\n  socket: any;\r\n  endGame: () => void;\r\n}\r\n\r\ninterface TimerState {\r\n  seconds: number;\r\n  hasGameEnded: boolean;\r\n}\r\n\r\nclass Timer extends Component<TimerProps, TimerState> {\r\n  constructor(props: TimerProps) {\r\n    super(props);\r\n    this.state = { seconds: 10, hasGameEnded: false };\r\n  }\r\n\r\n  interval: any;\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.updateTimer(), 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  updateTimer = () => {\r\n    let prevSeconds = this.state.seconds;\r\n    if (prevSeconds >= 1) {\r\n      this.setState({\r\n        seconds: prevSeconds - 1,\r\n      });\r\n      if (prevSeconds === 1) {\r\n        this.props.endGame();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let className = \"\";\r\n    if (this.state.seconds > 0) {\r\n      className = \"animated infinite bounceIn\";\r\n    }\r\n    return (\r\n      <div className=\"game-over\">\r\n        <p>Game will be over in:</p>\r\n        <p className={\"timer \" + className}>{this.state.seconds}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { BoardLine } from \"./BoardLine\";\r\nimport Notification from \"./Notification\";\r\nimport { BoxState } from \"./Box\";\r\nimport Waiting from \"./Waiting\";\r\nimport Timer from \"./Timer\";\r\n\r\n//TODO: Fix some logic of duplicate keys for rows generated\r\n\r\n// Another variation: Right now the host will check mark the numbers which are done;\r\n// What if he messes up? What if he could not maintain the board correctly and give awards to\r\n// the bogus ones without even realizing that he has not been maintaining the board properly;\r\n// We will have a rectify button which will actually change all the states of the boxes by looking\r\n// at the array. This is still easy to do.\r\n\r\ninterface BoardProps {\r\n  socket: any;\r\n  endGame: () => void;\r\n}\r\n\r\ninterface BoardState {\r\n  // This is the array that actually holds what numbers are checked and what are not in 1-90 order\r\n  allBoardNumbers: Array<Array<BoxState>>;\r\n\r\n  // Array of shuffled numbers\r\n  shuffledBoardNumbers: Array<number>;\r\n\r\n  // This is index of the shuffledBoardNumbers array. So tells basically which number should come next\r\n  goneNumbers: number;\r\n\r\n  // for timer\r\n  showTimer: boolean;\r\n}\r\n\r\n// Utility Functions\r\nfunction shuffle(a: Array<number>): Array<number> {\r\n  var j, x, i;\r\n  for (i = a.length - 1; i > 0; i--) {\r\n    j = Math.floor(Math.random() * (i + 1));\r\n    x = a[i];\r\n    a[i] = a[j];\r\n    a[j] = x;\r\n  }\r\n  return a;\r\n}\r\n\r\n// Creates an array of size 90 with 1-90 at indices 0-89\r\nfunction createArray(): Array<number> {\r\n  let a = [];\r\n  for (let i = 0; i < 90; ++i) {\r\n    a[i] = i + 1;\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction createNumbersLine(n: number): Array<BoxState> {\r\n  // generates an array of 10 elements; from n - n+9\r\n  let a: Array<BoxState> = [];\r\n  for (let i = 0; i < 10; ++i) {\r\n    a[i] = { value: n + i, check: false };\r\n  }\r\n  return a;\r\n}\r\n\r\n// Function generates all numbers 1-90 in order for printing the board\r\nfunction generateAllBoardNumbers(): Array<Array<BoxState>> {\r\n  let a: Array<Array<BoxState>> = [];\r\n  for (let i = 0; i < 9; ++i) {\r\n    a[i] = createNumbersLine(i * 10 + 1);\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction generateAllLines(allBoardNumbers: Array<Array<BoxState>>) {\r\n  let allLines = [];\r\n  for (let i = 0; i < allBoardNumbers.length; ++i) {\r\n    allLines.push(<BoardLine key={i} index={i} numbers={allBoardNumbers[i]} />);\r\n  }\r\n  return allLines;\r\n}\r\n\r\nclass Board extends Component<BoardProps, BoardState> {\r\n  constructor(props: BoardProps) {\r\n    super(props);\r\n    let boardNumbersArray = shuffle(createArray());\r\n    this.state = {\r\n      shuffledBoardNumbers: boardNumbersArray,\r\n      goneNumbers: 0,\r\n      allBoardNumbers: generateAllBoardNumbers(),\r\n      showTimer: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.socket.on(\"showTimer\", () => {\r\n      // Disable the generate new button\r\n      let generateNewButton = document.querySelector(\r\n        \"button.new-number\"\r\n      ) as HTMLInputElement;\r\n      generateNewButton.disabled = true;\r\n      generateNewButton.classList.add(\"disabled-button\");\r\n      this.setState({ showTimer: true });\r\n    });\r\n    this.props.socket.on(\"callWinToHost\", () => {\r\n      if (this.state.showTimer === true) this.setState({ showTimer: false });\r\n    });\r\n  }\r\n\r\n  handleNewNumber = (newNumber: number) => {\r\n    let columnNumber = newNumber % 10 === 0 ? 9 : (newNumber % 10) - 1;\r\n    let rowNum =\r\n      newNumber % 10 === 0 ? newNumber / 10 - 1 : Math.floor(newNumber / 10);\r\n    let allBoardNumbers = this.state.allBoardNumbers;\r\n    allBoardNumbers[rowNum][columnNumber] = {\r\n      value: newNumber,\r\n      check: true,\r\n    };\r\n    this.setState({\r\n      allBoardNumbers: allBoardNumbers,\r\n      goneNumbers: this.state.goneNumbers + 1,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let timer = null;\r\n    if (this.state.showTimer) {\r\n      timer = <Timer socket={this.props.socket} endGame={this.props.endGame} />;\r\n    }\r\n\r\n    let newNumber = 0;\r\n    let allLines = generateAllLines(this.state.allBoardNumbers);\r\n    return (\r\n      <div className=\"board-component-main\">\r\n        <button\r\n          className={\"new-number btn btn__primary\"}\r\n          onClick={() => {\r\n            newNumber = this.state.shuffledBoardNumbers[this.state.goneNumbers];\r\n            this.handleNewNumber(newNumber);\r\n            this.props.socket.emit(\"newNumber\", newNumber);\r\n          }}\r\n        >\r\n          Generate New\r\n        </button>\r\n        <div>\r\n          <div className=\"new-number-host-container\">\r\n            <p className={\"new-number-host\"}>\r\n              {this.state.shuffledBoardNumbers[this.state.goneNumbers - 1]\r\n                ? this.state.shuffledBoardNumbers[this.state.goneNumbers - 1]\r\n                : \"\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {timer}\r\n        <Waiting socket={this.props.socket} playerType=\"Host\" />\r\n        <div className=\"notification-parent\">\r\n          {/* This div is for setting the opacity when notification is shown */}\r\n          <div id=\"ticket-board-container\" className=\"no-click\">\r\n            {allLines}\r\n          </div>\r\n          <Notification socket={this.props.socket} type=\"host\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import * as React from \"react\";\r\nimport Box from \"./Box\";\r\nimport { BoxState } from \"./Box\";\r\n\r\nfunction generateBoxComponents(\r\n  numbers: Array<BoxState>,\r\n  callback: (boxIndex: number, check: boolean) => void\r\n) {\r\n  let boxes = [];\r\n  for (let i = 0; i < numbers.length; ++i) {\r\n    boxes[i] = (\r\n      <Box\r\n        key={i}\r\n        value={numbers[i].value}\r\n        check={numbers[i].check}\r\n        changeTicketState={callback}\r\n        index={i}\r\n      />\r\n    );\r\n  }\r\n  return boxes;\r\n}\r\n\r\ninterface LineProps {\r\n  index: number;\r\n  numbers: Array<BoxState>;\r\n  changeTicketState: (\r\n    lineIndex: number,\r\n    boxIndex: number,\r\n    check: boolean\r\n  ) => void;\r\n}\r\n\r\nfunction Line(props: LineProps) {\r\n  // this callback will be envoked from box component when it gets clicked\r\n  let changeTicketState = (boxIndex: number, check: boolean) => {\r\n    props.changeTicketState(props.index, boxIndex, check);\r\n  };\r\n  let boxes = generateBoxComponents(props.numbers, changeTicketState);\r\n\r\n  return <div className=\"line\">{boxes}</div>;\r\n}\r\n\r\nexport default Line;\r\n","import * as React from \"react\";\r\nimport Line from \"./Line\";\r\nimport { BoxState } from \"./Box\";\r\n\r\ninterface HouseProps {\r\n  houseIndex: number;\r\n  houseNumbers: Array<Array<BoxState>>;\r\n  changeTicketState: (\r\n    houseIndex: number,\r\n    lineIndex: number,\r\n    boxIndex: number,\r\n    check: boolean\r\n  ) => void;\r\n}\r\n\r\nfunction House(props: HouseProps) {\r\n  let changeTicketState = (\r\n    lineIndex: number,\r\n    boxIndex: number,\r\n    check: boolean\r\n  ): void => {\r\n    props.changeTicketState(props.houseIndex, lineIndex, boxIndex, check);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Line\r\n        key={0}\r\n        index={0}\r\n        numbers={props.houseNumbers[0]}\r\n        changeTicketState={changeTicketState}\r\n      />\r\n      <Line\r\n        key={1}\r\n        index={1}\r\n        numbers={props.houseNumbers[1]}\r\n        changeTicketState={changeTicketState}\r\n      />\r\n      <Line\r\n        key={2}\r\n        index={2}\r\n        numbers={props.houseNumbers[2]}\r\n        changeTicketState={changeTicketState}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default House;\r\n","import * as React from \"react\";\r\nimport House from \"./House\";\r\nimport { BoxState } from \"./Box\";\r\n\r\ninterface TicketProps {\r\n  // Don't need socket here when it generated on host's screen\r\n  socket?: any;\r\n\r\n  // number of houses\r\n  numHouses: number;\r\n\r\n  houses: Array<Array<Array<BoxState>>>;\r\n  changeTicketState?: (\r\n    houseIndex: number,\r\n    lineIndex: number,\r\n    boxIndex: number,\r\n    check: boolean\r\n  ) => void;\r\n}\r\n\r\nfunction Ticket(props: TicketProps) {\r\n  let changeTicketState = (\r\n    houseIndex: number,\r\n    lineIndex: number,\r\n    boxIndex: number,\r\n    check: boolean\r\n  ): void => {\r\n    if (props.changeTicketState)\r\n      props.changeTicketState(houseIndex, lineIndex, boxIndex, check);\r\n  };\r\n\r\n  let ticket = [];\r\n  for (let i = 0; i < props.numHouses; ++i) {\r\n    ticket[i] = (\r\n      <>\r\n        <House\r\n          key={i}\r\n          changeTicketState={changeTicketState}\r\n          houseNumbers={props.houses[i]}\r\n          houseIndex={i}\r\n        />\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n  return <div>{ticket}</div>;\r\n}\r\n\r\nexport default Ticket;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Award } from \"./Config\";\r\n\r\ninterface WinningButtonsProps {\r\n  awards: Award[];\r\n  winCallBack: (callWinType: string) => void;\r\n}\r\n\r\ninterface WinningButtonsState { }\r\n\r\nclass WinningButtons extends Component<\r\n  WinningButtonsProps,\r\n  WinningButtonsState\r\n> {\r\n  awardButtons: JSX.Element[];\r\n  constructor(props: WinningButtonsProps) {\r\n    super(props);\r\n    this.awardButtons = [];\r\n\r\n    for (let i = 0; i < this.props.awards.length; ++i) {\r\n      this.awardButtons.push(\r\n        <button\r\n          className=\"btn btn__primary\"\r\n          key={i}\r\n          onClick={() => {\r\n            this.props.winCallBack(this.props.awards[i].nameAward);\r\n          }}\r\n        >\r\n          {this.props.awards[i].nameAward}\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className={\"winning-buttons\"}>{this.awardButtons}</div>;\r\n  }\r\n}\r\n\r\nexport default WinningButtons;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\ninterface GoneNumbersProps {\r\n  numbers: Array<number>;\r\n}\r\n\r\ninterface GoneNumbersState { }\r\n\r\nclass GoneNumbers extends Component<GoneNumbersProps, GoneNumbersState> {\r\n  constructor(props: GoneNumbersProps) {\r\n    super(props);\r\n    this.state = {\r\n      isShown: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let mainComp = [];\r\n    for (let i = this.props.numbers.length - 1; i >= 0; --i) {\r\n      mainComp.push(<p key={i}>{this.props.numbers[i]}</p>);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {\r\n          mainComp.length > 0 ?\r\n            <div className=\"gone-numbers-container\">\r\n              <button\r\n                className={`btn ${mainComp.length > 0 ? 'fillmaincomp' : 'emptymaincomp'}`}\r\n                id=\"gone-numbers-button\"\r\n                onClick={() => {\r\n                  let goneNumbers = document.getElementById(\"gone-numbers-menu\");\r\n                  let button = document.getElementById(\"gone-numbers-button\");\r\n                  if (goneNumbers !== null && button !== null) {\r\n                    if (\r\n                      window\r\n                        .getComputedStyle(goneNumbers)\r\n                        .getPropertyValue(\"display\") !== \"none\"\r\n                    ) {\r\n                      goneNumbers.style.display = \"none\";\r\n                      button.innerHTML = \"Gone Numbers\";\r\n                    } else {\r\n                      goneNumbers.style.display = \"block\";\r\n                      goneNumbers.classList.add(\"animated\", \"fadeIn\");\r\n                      button.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon s-ion-icon\" viewBox=\"0 0 512 512\"><path d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"></path></svg>`;\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                Gone Numbers\r\n              </button>\r\n              <div id=\"gone-numbers-menu\">{mainComp}</div>\r\n            </div> : null\r\n        }\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoneNumbers;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport GoneNumbers from \"./GoneNumbers\";\r\n\r\ninterface NewNumberProps {\r\n  socket: any;\r\n  name: string;\r\n}\r\n\r\ninterface NewNumberState {\r\n  newNumber: number;\r\n}\r\n\r\nexport interface newNumberObj_t {\r\n  newNumber: number;\r\n}\r\n\r\nclass NewNumber extends Component<NewNumberProps, NewNumberState> {\r\n  goneNumbers: Array<number>;\r\n  constructor(props: NewNumberProps) {\r\n    super(props);\r\n    this.state = { newNumber: 0 };\r\n    this.goneNumbers = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.socket.on(\r\n      \"newNumberFromHost\",\r\n      (newNumberObj: newNumberObj_t) => {\r\n        this.goneNumbers.push(newNumberObj.newNumber);\r\n        this.setState({ newNumber: newNumberObj.newNumber });\r\n      }\r\n    );\r\n  }\r\n\r\n  // For generating random key for every render so that dom is manipulated every\r\n  // single time for new render to display the animation\r\n  generateRandomKey = () => {\r\n    return Math.random() * 10000;\r\n  };\r\n\r\n  render() {\r\n    let newNumberComponent = (\r\n      <>\r\n        <div className=\"homeclick\">\r\n          <a href=\"/\" style={{ color: \"#000000\", textDecoration: 'none' }} title=\"exit\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\" /><path d=\"M10.79 16.29c.39.39 1.02.39 1.41 0l3.59-3.59c.39-.39.39-1.02 0-1.41L12.2 7.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L12.67 11H4c-.55 0-1 .45-1 1s.45 1 1 1h8.67l-1.88 1.88c-.39.39-.38 1.03 0 1.41zM19 3H5c-1.11 0-2 .9-2 2v3c0 .55.45 1 1 1s1-.45 1-1V6c0-.55.45-1 1-1h12c.55 0 1 .45 1 1v12c0 .55-.45 1-1 1H6c-.55 0-1-.45-1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1v3c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\" /></svg>\r\n          </a>\r\n        </div>\r\n        <span className=\"usernamehead\">Hi, {this.props.name}</span>\r\n        <p className=\"new-number-player\">New Number </p>\r\n        <div className=\"wrapgennumber\">\r\n          <div\r\n            key={this.generateRandomKey()}\r\n            className=\"new-number-player-container custom-pulse\"\r\n          >\r\n            <p className=\"only-new-number-player\">\r\n              {this.state.newNumber ? this.state.newNumber : \"\"}\r\n            </p>\r\n          </div>\r\n          <span className=\"circle__back-1\"></span>\r\n          <span className=\"circle__back-2\"></span>\r\n        </div>\r\n        <GoneNumbers numbers={this.goneNumbers} />\r\n      </>\r\n    );\r\n    return newNumberComponent;\r\n  }\r\n}\r\n\r\nexport default NewNumber;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport Ticket from \"./Ticket\";\r\nimport { BoxState } from \"./Box\";\r\nimport { generateTicket } from \"../utils/utils\";\r\nimport WinningButtons from \"./WinningButtons\";\r\nimport NewNumber from \"./NewNumber\";\r\nimport Notification from \"./Notification\";\r\nimport { Award } from \"./Config\";\r\nimport Waiting from \"./Waiting\";\r\nimport Timer from \"./Timer\";\r\n\r\ninterface PcTicketProps {\r\n  socket: any;\r\n  name:string;\r\n  // awards coming for winning buttons\r\n  awards: Award[];\r\n\r\n  // number of houses\r\n  numHouses: number;\r\n\r\n  endGame: () => void;\r\n}\r\n\r\ninterface PcTicketState {\r\n  showTimer: boolean;\r\n}\r\n\r\nclass PcTicket extends Component<PcTicketProps, PcTicketState> {\r\n  houses: Array<Array<Array<BoxState>>>;\r\n  constructor(props: PcTicketProps) {\r\n    super(props);\r\n    this.houses = generateTicket(this.props.numHouses);\r\n    this.state = { showTimer: false };\r\n  }\r\n  componentDidMount() {\r\n    this.props.socket.on(\"showTimer\", () => {\r\n      this.setState({ showTimer: true });\r\n    });\r\n\r\n    // hiding timer in case there is another call for win\r\n    this.props.socket.on(\"callWinToHost\", () => {\r\n      if (this.state.showTimer === true) this.setState({ showTimer: false });\r\n    });\r\n  }\r\n  changeTicketState = (\r\n    houseIndex: number,\r\n    lineIndex: number,\r\n    boxIndex: number,\r\n    check: boolean\r\n  ): void => {\r\n    let { value } = this.houses[houseIndex][lineIndex][boxIndex];\r\n    this.houses[houseIndex][lineIndex][boxIndex] = { value: value, check };\r\n    console.log(\"here it is after changing\", this.houses);\r\n  };\r\n\r\n  handleWinningCall = (callWinType: string) => {\r\n    // send ticket here as well\r\n    this.props.socket.emit(\"callWinFromPC\", {\r\n      callWinType: callWinType,\r\n      houses: this.houses,\r\n    });\r\n  };\r\n\r\n  winningButtons = (\r\n    <WinningButtons\r\n      key={0}\r\n      awards={this.props.awards}\r\n      winCallBack={this.handleWinningCall}\r\n    />\r\n  );\r\n\r\n  render() {\r\n    let timer = null;\r\n    if (this.state.showTimer) {\r\n      timer = <Timer socket={this.props.socket} endGame={this.props.endGame} />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"pc-ticket\">\r\n        <NewNumber socket={this.props.socket} name={this.props.name} />\r\n        {timer}\r\n        <Waiting playerType=\"PC\" socket={this.props.socket} />\r\n        <div className=\"notification-parent\">\r\n          {/* This div is for setting the opacity when notification is shown */}\r\n          <div id=\"ticket-board-container\">\r\n            <Ticket\r\n              houses={this.houses}\r\n              changeTicketState={this.changeTicketState}\r\n              numHouses={this.props.numHouses}\r\n            />\r\n          </div>\r\n\r\n          <Notification socket={this.props.socket} type=\"Pc\" />\r\n        </div>\r\n\r\n        {this.winningButtons}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PcTicket;\r\n","import * as React from \"react\";\r\n\r\ninterface ResultButtonsProps {\r\n  bogey: string;\r\n  win: string;\r\n  resultCallback: (result: string) => void;\r\n}\r\n\r\nfunction ResultButtons(props: ResultButtonsProps) {\r\n  return (\r\n    <div className=\"result-buttons\">\r\n      <button\r\n        className=\"btn btn__primary\"\r\n        onClick={() => {\r\n          props.resultCallback(props.win);\r\n        }}\r\n      >\r\n        {props.win}\r\n      </button>\r\n      <button\r\n        className=\"btn\"\r\n        onClick={() => {\r\n          props.resultCallback(props.bogey);\r\n        }}\r\n      >\r\n        {props.bogey}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultButtons;\r\n","import * as React from \"react\";\r\nimport Ticket from \"./Ticket\";\r\nimport ResultButtons from \"./ResultButtons\";\r\nimport { callWin } from \"./Player\";\r\n\r\ninterface HostTicketProps {\r\n  socket: any;\r\n  callWinObj: callWin;\r\n  removeTicketFromHost: (id: string) => void;\r\n}\r\n\r\nfunction HostTicket(props: HostTicketProps) {\r\n  let handleResultCall = (result: string) => {\r\n    props.socket.emit(\"resultsFromHost\", {\r\n      result: result,\r\n      callWinType: props.callWinObj.callWinType,\r\n      userCalledForWin: props.callWinObj.user,\r\n    });\r\n    // Key is concatenation of id and callWinType\r\n    props.removeTicketFromHost(\r\n      props.callWinObj.user.id + props.callWinObj.callWinType\r\n    );\r\n  };\r\n  let playerTicket = (\r\n    <div className=\"host-ticket\">\r\n      <br></br>\r\n      <p className=\"win-call-type\">{props.callWinObj.callWinType}</p>\r\n      <p className=\"player-name\">{props.callWinObj.user.username}'s Ticket</p>\r\n      <div className=\"no-click\">\r\n        <Ticket\r\n          houses={props.callWinObj.houses}\r\n          numHouses={props.callWinObj.houses.length}\r\n        />\r\n      </div>\r\n      <ResultButtons\r\n        key={0}\r\n        win={\"Confirm Win!\"}\r\n        bogey={\"Bogey!\"}\r\n        resultCallback={handleResultCall}\r\n      />\r\n    </div>\r\n  );\r\n  return <>{playerTicket}</>;\r\n}\r\n\r\nexport default HostTicket;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { callWin } from \"./Player\";\r\nimport HostTicket from \"./HostTicket\";\r\nimport Joyride, { Step } from \"react-joyride\";\r\n\r\ninterface MultipleHostTicketProps {\r\n  socket: any;\r\n  showWalkthrough: boolean;\r\n}\r\n\r\ninterface MultipleHostTicketState {\r\n  ticketFromPlayers: { [id: string]: callWin };\r\n  runWalkthrough: boolean;\r\n}\r\n\r\nclass MultipleHostTicket extends Component<\r\n  MultipleHostTicketProps,\r\n  MultipleHostTicketState\r\n> {\r\n  hasWalkthroughShown: boolean;\r\n  constructor(props: MultipleHostTicketProps) {\r\n    super(props);\r\n    this.state = { ticketFromPlayers: {}, runWalkthrough: false };\r\n    \r\n    // hasWalkthrough shown handles this logic: \r\n    // if player tickets become zero then the tutorial is shown and hasWalkthrough shown\r\n    // becomes true and tutorial is never shown. This is the case when in props we receive\r\n    // showWalkthrough as true. If it is false then we just change hasWalkthrough shown to be\r\n    // true and then the walkThrough never playes\r\n    this.hasWalkthroughShown = !this.props.showWalkthrough;\r\n  }\r\n\r\n  walkThroughSteps: Step[] = [\r\n    {\r\n      target: \".host-ticket\",\r\n      content:\r\n        \"This is the player's ticket. They think they have won this award. Your task is to check the 'crossed' numbers on this ticket and tell the players if this is a valid win or a Bogey!\",\r\n      disableBeacon: true,\r\n      placement: \"bottom\",\r\n      disableOverlay: true,\r\n    },\r\n  ];\r\n\r\n  componentDidMount() {\r\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\r\n      // updating values\r\n      let newTicketsState = this.state.ticketFromPlayers;\r\n      let runWalkthrough: boolean = this.hasWalkthroughShown ? false : true;\r\n\r\n      // JS does not support keys to be objects, so this is easy workaround for the\r\n      // case when same user made 2 different win calls at the same time; The key\r\n      // is a string concatenation of id and wintype\r\n      newTicketsState[callWinObj.user.id + callWinObj.callWinType] = callWinObj;\r\n      this.setState({\r\n        ticketFromPlayers: newTicketsState,\r\n        runWalkthrough: runWalkthrough,\r\n      });\r\n      // Disable the generate new button\r\n      let generateNewButton = document.querySelector(\r\n        \"button.new-number\"\r\n      ) as HTMLInputElement;\r\n      generateNewButton.disabled = true;\r\n      generateNewButton.classList.add(\"disabled-button\");\r\n    });\r\n  }\r\n\r\n  removeTicket = (idWinCall: string) => {\r\n    let newState = this.state.ticketFromPlayers;\r\n    delete newState[idWinCall];\r\n    this.setState({ ticketFromPlayers: newState });\r\n\r\n    // check if there is no HostTicket then enable the generate new button and emit event for 'Waiting' component\r\n    if (Object.keys(newState).length === 0 && newState.constructor === Object) {\r\n      let generateNewButton = document.querySelector(\r\n        \"button.new-number\"\r\n      ) as HTMLInputElement;\r\n      generateNewButton.disabled = false;\r\n      generateNewButton.classList.remove(\"disabled-button\");\r\n      this.props.socket.emit(\"hostCompletedChecking\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let ticketComponents = [];\r\n    for (const [key, value] of Object.entries(this.state.ticketFromPlayers)) {\r\n      let ticket = (\r\n        <HostTicket\r\n          key={key}\r\n          socket={this.props.socket}\r\n          callWinObj={value}\r\n          removeTicketFromHost={this.removeTicket}\r\n        />\r\n      );\r\n      ticketComponents.push(ticket);\r\n    }\r\n    return (\r\n      <>\r\n        {ticketComponents}\r\n        <Joyride\r\n          steps={this.walkThroughSteps}\r\n          run={this.state.runWalkthrough}\r\n          continuous={true}\r\n          disableOverlayClose={true}\r\n          showProgress={true}\r\n          showSkipButton={true}\r\n          spotlightClicks={true}\r\n          styles={{\r\n            options: {\r\n              zIndex: 10000,\r\n              primaryColor: \"#0e141f\",\r\n              textColor: \"#0e141f\",\r\n            },\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MultipleHostTicket;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { resultObj } from \"./Player\";\r\nimport { Award } from \"./Config\";\r\nimport { newNumberObj_t } from \"./NewNumber\";\r\nimport \"../css/Prizes.css\";\r\n\r\ninterface PrizesProps {\r\n  socket: any;\r\n  awards: Award[];\r\n  playerType: string;\r\n  endGame: () => void;\r\n}\r\n\r\ninterface PrizesState {\r\n  // remaining awards should store, nameAward and numAward\r\n  remainingAwards: Award[];\r\n\r\n  // also keeping track of whoWonWhat\r\n  // string -> string[]\r\n  // nameAward -> players who have won it\r\n  whoWonWhat: {\r\n    [nameAward: string]: {\r\n      [onNumber: number]: string[];\r\n    };\r\n  };\r\n}\r\n\r\nclass Prizes extends Component<PrizesProps, PrizesState> {\r\n  newNumber: number = 0;\r\n  constructor(props: PrizesProps) {\r\n    super(props);\r\n    this.state = {\r\n      remainingAwards: this.props.awards,\r\n      whoWonWhat: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // updating my copy of new number from the host\r\n    this.props.socket.on(\r\n      \"newNumberFromHost\",\r\n      (newNumberObj: newNumberObj_t) => {\r\n        this.newNumber = newNumberObj.newNumber;\r\n\r\n        // disable the winButton for which numaward = 0\r\n        for (let i = 0; i < this.state.remainingAwards.length; ++i) {\r\n          if (parseInt(this.state.remainingAwards[i].numAward) === 0) {\r\n            let winningButton = document.querySelector(\r\n              `.winning-buttons button:nth-child(${i + 1})`\r\n            ) as HTMLInputElement;\r\n\r\n            // Will be null on host's screen\r\n            if (winningButton) {\r\n              winningButton.disabled = true;\r\n              winningButton.classList.add(\"disabled-button\");\r\n            }\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    this.props.socket.on(\"hostCompletedChecking\", () => {\r\n      let anyAwardsLeft: boolean = false;\r\n      for (let i = 0; i < this.state.remainingAwards.length; ++i) {\r\n        // Check if anyAwardsLeft, if not then game has ended\r\n        if (parseInt(this.state.remainingAwards[i].numAward) > 0)\r\n          anyAwardsLeft = true;\r\n      }\r\n\r\n      // timer logic\r\n      if (!anyAwardsLeft && this.props.playerType === \"Host\") {\r\n        this.props.socket.emit(\"showTimer\");\r\n      }\r\n    });\r\n\r\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\r\n      if (resultsObj.result === \"Confirm Win!\") {\r\n        let currAwards = this.state.remainingAwards;\r\n        let currWhoWonWhat = this.state.whoWonWhat;\r\n        for (let i = 0; i < currAwards.length; ++i) {\r\n          if (currAwards[i].nameAward === resultsObj.callWinType) {\r\n            // adding entry for new award\r\n            if (currWhoWonWhat[resultsObj.callWinType] === undefined) {\r\n              currWhoWonWhat[resultsObj.callWinType] = {};\r\n            }\r\n\r\n            if (\r\n              currWhoWonWhat[resultsObj.callWinType][this.newNumber] ===\r\n              undefined\r\n            ) {\r\n              currWhoWonWhat[resultsObj.callWinType][this.newNumber] = [\r\n                resultsObj.calledWinUsername,\r\n              ];\r\n\r\n              // decrement currAwards[i].numAward\r\n              let currNumAward = parseInt(currAwards[i].numAward);\r\n              --currNumAward;\r\n              currAwards[i].numAward = currNumAward.toString();\r\n            } else {\r\n              currWhoWonWhat[resultsObj.callWinType][this.newNumber].push(\r\n                resultsObj.calledWinUsername\r\n              );\r\n            }\r\n          }\r\n        }\r\n        this.setState({\r\n          remainingAwards: currAwards,\r\n          whoWonWhat: currWhoWonWhat,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    // use state.remainingAwards to make a table\r\n    let zeroAwardsLeft = <span className=\"zero-awards-left\">x0</span>;\r\n\r\n    // component about figuring out who won what award along with ties\r\n    let whoWonComp = [];\r\n    for (let i = 0; i < this.state.remainingAwards.length; ++i) {\r\n      let tiedPlayers = [];\r\n      for (var key in this.state.whoWonWhat[\r\n        this.state.remainingAwards[i].nameAward\r\n      ]) {\r\n        if (\r\n          this.state.whoWonWhat[\r\n            this.state.remainingAwards[i].nameAward\r\n          ].hasOwnProperty(key)\r\n        ) {\r\n          tiedPlayers.push(\r\n            this.state.whoWonWhat[this.state.remainingAwards[i].nameAward][\r\n              key\r\n            ].join(\" | \")\r\n          );\r\n        }\r\n      }\r\n      whoWonComp.push(tiedPlayers.join(\", \"));\r\n    }\r\n\r\n    // rendering the actual prizes\r\n    let prizeComp = [];\r\n    for (let i = 0; i < this.state.remainingAwards.length; ++i) {\r\n      prizeComp.push(\r\n        <tr key={i}>\r\n          <td className=\"award\">{this.state.remainingAwards[i].nameAward}</td>\r\n          <td className=\"left\">\r\n            {this.state.remainingAwards[i].numAward === \"0\"\r\n              ? zeroAwardsLeft\r\n              : \"x\" + this.state.remainingAwards[i].numAward}\r\n          </td>\r\n          <td className=\"won-by\">{whoWonComp[i]}</td>\r\n        </tr>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"prizes-container\">\r\n        <p className=\"award-status\">Award Status</p>\r\n        <table className=\"prizes\">\r\n          <tr>\r\n            <th className=\"award\">Award</th>\r\n            <th className=\"left\">Left</th>\r\n            <th className=\"won-by\">Won By</th>\r\n          </tr>\r\n          {prizeComp}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Prizes;\r\n","import * as React from \"react\";\r\nimport Joyride, { Step } from \"react-joyride\";\r\n\r\nexport interface WalkthroughProps {\r\n  type: \"game\" | \"config\";\r\n  playerType: \"PC\" | \"Host\";\r\n  runWalkthrough: boolean;\r\n}\r\n\r\nexport interface WalkthroughState {\r\n  // run: boolean;\r\n}\r\n\r\nclass Walkthrough extends React.Component<WalkthroughProps, WalkthroughState> {\r\n  diffTypeSteps: {\r\n    config: { PC: Step[]; Host: Step[] };\r\n    game: { PC: Step[]; Host: Step[] };\r\n  };\r\n  constructor(props: WalkthroughProps) {\r\n    super(props);\r\n    // this.state = { run: this.props.runWalkthrough };\r\n    let configHostSteps: Step[] = [\r\n      {\r\n        target: \".snackbar\",\r\n        content: (\r\n          <>\r\n          <h3>You are the host!</h3>\r\n          <p>Share this link with your friends so that they can play in this game created by you.</p>\r\n          </>\r\n        ),\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \".config-table\",\r\n        content: \"You can use this section to add, delete or customize awards\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \".ready-players-container\",\r\n        content: \"You will see all players and their status in the game here.\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \".start-game\",\r\n        content:\r\n          \"Click this button after all players have joined to start the game.\",\r\n        disableBeacon: true,\r\n        spotlightClicks: false,\r\n      },\r\n    ];\r\n\r\n    let ConfigPCSteps: Step[] = [\r\n      {\r\n        target:\r\n          \"#pc-config-table > tbody > tr:nth-child(1) > td:nth-child(2) > input[type=number]\",\r\n        content: \"Select the number of tickets you want to play with.\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \"button.ready\",\r\n        content:\r\n          'Click this button to mark yourself \"Ready\" after you select the number of tickets you want to play with.',\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \".ready-players-container\",\r\n        content: \"You will see all players and their status in the game here.\",\r\n        disableBeacon: true,\r\n      },\r\n    ];\r\n\r\n    let gameHostSteps = [\r\n      {\r\n        target: \".new-number\",\r\n        content:\r\n          \"Clicking this generates a new random number which will be displayed on every player's screen.\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \"table.prizes\",\r\n        content: \"Remaining awards and winners will be shown here.\",\r\n        disableBeacon: true,\r\n      },\r\n    ];\r\n\r\n    let gamePCSteps = [\r\n      {\r\n        target: \".new-number-player-container\",\r\n        content: \"The new random number called by the host will be shown here\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \"#gone-numbers-button\",\r\n        content: \"To view all the previous numbers, click this button.\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \"#ticket-board-container\",\r\n        content:\r\n          \"This is your Tambola ticket. You can cross a number if it matches the called number.\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \".winning-buttons\",\r\n        content:\r\n          \"If you think you are winning an award, call for that award using these buttons. Your ticket will then be checked by the host for a Bogey!\",\r\n        disableBeacon: true,\r\n      },\r\n      {\r\n        target: \"table.prizes\",\r\n        content: \"Remaining awards and winners will be shown here.\",\r\n        disableBeacon: true,\r\n      },\r\n    ];\r\n\r\n    this.diffTypeSteps = {\r\n      config: { PC: ConfigPCSteps, Host: configHostSteps },\r\n      game: { PC: gamePCSteps, Host: gameHostSteps },\r\n    };\r\n  }\r\n  componentDidUpdate(prevProps: WalkthroughProps) {\r\n    console.log(\"componendidupdate called with run \", this.props.runWalkthrough)\r\n    if(this.props.runWalkthrough !== prevProps.runWalkthrough) {\r\n      this.setState({run: this.props.runWalkthrough});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let playerType = this.props.playerType;\r\n    let tutorialType = this.props.type;\r\n    const steps = this.diffTypeSteps[tutorialType][playerType];\r\n    return (\r\n      <>\r\n        <Joyride\r\n          steps={steps}\r\n          run={this.props.runWalkthrough}\r\n          continuous={true}\r\n          disableOverlayClose={true}\r\n          showProgress={true}\r\n          showSkipButton={true}\r\n          spotlightClicks={true}\r\n          styles={{\r\n            options: {\r\n              zIndex: 10000,\r\n              primaryColor: \"#0e141f\",\r\n              textColor: \"#0e141f\",\r\n            },\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Walkthrough;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport Board from \"./Board\";\r\nimport { BoxState } from \"./Box\";\r\nimport PcTicket from \"./PcTicket\";\r\nimport MultipleHostTicket from \"./MultipleHostTickets\";\r\nimport { Award } from \"./Config\";\r\nimport Prizes from \"./Prizes\";\r\nimport Walkthrough from \"./Walkthrough\";\r\nimport Reward from \"react-rewards\";\r\nimport { doNotLeavePage } from \"../utils/utils\";\r\n\r\n\r\nexport interface callWin {\r\n  callWinType: string;\r\n  houses: Array<Array<Array<BoxState>>>;\r\n  user: { id: string; username: string; room: string };\r\n}\r\n\r\nexport interface resultObj {\r\n  callWinType: string;\r\n  calledWinUsername: string;\r\n  result: string;\r\n}\r\n\r\ninterface PlayerProps {\r\n  socket: any;\r\n  type: string; // type is either PC or host\r\n  name: string;\r\n\r\n  // awards coming for buttons and leaderboard\r\n  awards: Award[];\r\n\r\n  // for PC\r\n  numHouses: number;\r\n  runWalkthrough: boolean\r\n}\r\n\r\ninterface PlayerState {\r\n  hasGameEnded: boolean;\r\n}\r\n\r\nclass Player extends Component<PlayerProps, PlayerState> {\r\n  // The declarations are just for Host type\r\n  ticketFromPlayer: Array<Array<Array<BoxState>>> | undefined;\r\n  winningCallFromPlayer: string | undefined;\r\n  userCalledForWin: { id: string; username: string; room: string } | undefined;\r\n  reward: any;\r\n  constructor(props: PlayerProps) {\r\n    super(props);\r\n    this.state = {\r\n      hasGameEnded: false,\r\n    };\r\n  }\r\n\r\n  // This function will be called if game ends\r\n  endGame = () => {\r\n    this.setState({ hasGameEnded: true });\r\n    this.reward.rewardMe();\r\n    window.removeEventListener('beforeunload', doNotLeavePage);\r\n    let timesRun = 0;\r\n    let interval = setInterval(() => {\r\n      this.reward.rewardMe();\r\n      ++timesRun;\r\n      if (timesRun === 4) clearInterval(interval);\r\n    }, 2000);\r\n  };\r\n\r\n  render() {\r\n    let mainComponent = null;\r\n    let gameOverP = null;\r\n    let gameEndedCssClass = \"\";\r\n    if (this.state.hasGameEnded) {\r\n      // This css class changes the opacity and disable all the clicks.\r\n      // This is different from how it is handled in Notifications component\r\n      gameEndedCssClass = \"game-ended no-click\";\r\n      gameOverP = <div className=\"gameovermain\"><p className=\"game-over animated rubberBand\">Game Over</p> <a href=\"/\" style={{ color: \"white\" }}>\r\n        <button className=\"btn btn__primary\">New Game</button></a></div>\r\n        ;\r\n    }\r\n    if (this.props.type === \"PC\") {\r\n      mainComponent = (\r\n        <div className=\"everything-but-prizes\">\r\n          <Walkthrough type=\"game\" playerType=\"PC\" runWalkthrough={this.props.runWalkthrough} />\r\n          <div className={gameEndedCssClass}>\r\n            <PcTicket\r\n              socket={this.props.socket}\r\n              numHouses={this.props.numHouses}\r\n              awards={this.props.awards}\r\n              endGame={this.endGame}\r\n              name={this.props.name}\r\n            />\r\n          </div>\r\n          {gameOverP}\r\n        </div>\r\n      );\r\n    } else if (this.props.type === \"Host\") {\r\n      mainComponent = (\r\n        <div className=\"everything-but-prizes\">\r\n          <Walkthrough type=\"game\" playerType=\"Host\" runWalkthrough={this.props.runWalkthrough} />\r\n          <div className={gameEndedCssClass}>\r\n            <Board socket={this.props.socket} endGame={this.endGame} />\r\n            <MultipleHostTicket socket={this.props.socket} showWalkthrough={this.props.runWalkthrough} />\r\n          </div>\r\n          {gameOverP}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"main-container\">\r\n          {mainComponent}\r\n          <Prizes\r\n            socket={this.props.socket}\r\n            awards={this.props.awards}\r\n            playerType={this.props.type}\r\n            endGame={this.endGame}\r\n          />\r\n        </div>\r\n        {/* This is just for game over confetti */}\r\n        <div className=\"game-over-reward\">\r\n          <Reward\r\n            ref={(ref: any) => {\r\n              this.reward = ref;\r\n            }}\r\n            type=\"confetti\"\r\n            config={{\r\n              elementCount: 90,\r\n              angle: 70,\r\n              spread: 70,\r\n              decay: 0.95,\r\n              lifetime: 100,\r\n            }}\r\n          ></Reward>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","import * as React from \"react\";\r\nimport { PcStatus } from \"./Config\";\r\n\r\ninterface ReadyPlayersProps {\r\n  players: PcStatus[];\r\n}\r\n\r\nfunction ReadyPlayers(props: ReadyPlayersProps) {\r\n  let checkMark = <span className=\"checkmark\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"/></svg></span>;\r\n  let playersComp = [];\r\n  let waitingMessage = null;\r\n\r\n  for (let i = 0; i < props.players.length; ++i) {\r\n    playersComp.push(\r\n      <tr key={i}>\r\n        <td>{props.players[i].user.username}</td>\r\n        <td>{props.players[i].numTickets}</td>\r\n        <td>{props.players[i].ready ? checkMark : <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon s-ion-icon\" viewBox=\"0 0 512 512\"><path d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"></path></svg>}</td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  if (playersComp.length === 0) {\r\n    waitingMessage = (\r\n      <p style={{ color: \"#000000\", marginLeft: \"0.75rem\" }}>\r\n        Waiting for other players to join...\r\n      </p>\r\n    );\r\n  } else {\r\n    waitingMessage = null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"ready-players-container\">\r\n      <h1 className=\"players-in-game\">Players in Game</h1>\r\n      <table className=\"ready-players\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th># of Tickets</th>\r\n          <th>Ready</th>\r\n        </tr>\r\n        {playersComp}\r\n      </table>\r\n      {waitingMessage}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReadyPlayers;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"../css/Snackbar.css\";\r\n\r\ninterface SnackbarProps {\r\n  message: string; // \"Click to copy the join link to your game\"\r\n  actionText: string; // \"Copy URL\"\r\n}\r\n\r\ninterface SnackbarState {\r\n  hidden: boolean;\r\n}\r\n\r\nclass Snackbar extends Component<SnackbarProps, SnackbarState> {\r\n  constructor(props: SnackbarProps) {\r\n    super(props);\r\n    this.state = { hidden: false };\r\n  }\r\n\r\n  handleCopyUrl = () => {\r\n    // Hacky way, but only way without using any external library\r\n    var dummy = document.createElement(\"input\"),\r\n      // curUrl = window.location.href;\r\n      curUrl = window.location.pathname.split('/game/')[1];\r\n    // var id = curUrl.substring(curUrl.lastIndexOf('/') + 1);\r\n\r\n    document.body.appendChild(dummy);\r\n    dummy.value = curUrl;\r\n    dummy.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(dummy);\r\n\r\n    this.setState({\r\n      hidden: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let animation;\r\n    if (this.state.hidden === true) {\r\n      animation = \"animated bounceOutUp\";\r\n    } else {\r\n      animation = \"animated bounceInDown\";\r\n    }\r\n    return (\r\n      <div className={animation}>\r\n        <div className=\"snackbar\">\r\n          <p className=\"snackbar-text\">{this.props.message}</p>\r\n            <button className=\"snackbar-action btn btn__primary\" onClick={this.handleCopyUrl}>\r\n              {this.props.actionText}\r\n            </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Snackbar;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"../css/Snackbar.css\";\r\n\r\ninterface ToastProps {\r\n  message: string; // \"Click to copy the join link to your game\"\r\n  isShown: boolean;\r\n  initiallyHidden: boolean;\r\n  handleClose: () => void;\r\n}\r\n\r\ninterface ToastState { }\r\n\r\nclass Toast extends Component<ToastProps, ToastState> {\r\n  constructor(props: ToastProps) {\r\n    super(props);\r\n    this.state = { isShown: this.props.isShown };\r\n  }\r\n\r\n  render() {\r\n    let animation,\r\n      displayStyle = \"flex\";\r\n    if (this.props.isShown === false) {\r\n      animation = \"animated bounceOutRight\";\r\n    } else {\r\n      animation = \"animated bounceInRight\";\r\n    }\r\n    if (this.props.initiallyHidden) displayStyle = \"none\";\r\n    return (\r\n      <div className={animation}>\r\n        <div className=\"snackbar\" style={{ display: displayStyle }}>\r\n          <p className=\"snackbar-text\">{this.props.message}</p>\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => {\r\n              this.props.handleClose();\r\n            }}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon s-ion-icon\" viewBox=\"0 0 512 512\"><path d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"></path></svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toast;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport ConfigTable from \"./ConfigTable\";\r\nimport Player from \"./Player\";\r\nimport ReadyPlayers from \"./ReadyPlayers\";\r\nimport Snackbar from \"./Snackbar\";\r\nimport Walkthrough from \"./Walkthrough\";\r\nimport Modal from \"react-modal\";\r\nimport Toast from \"./Toast\";\r\n\r\nconst customModalStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    backgroundColor: \"rgb(228 235 245 / 72%)\",\r\n    padding: '4rem',\r\n    boxShadow: \"0.8rem 0.8rem 1.4rem #c8d0e7, -0.2rem -0.2rem 1.8rem #ffffff\",\r\n    border: 0\r\n  },\r\n  overlay: {\r\n    backgroundColor: \"rgba(255, 255, 255, 0.35)\",\r\n    transition: \"all 1s\",\r\n    backdropFilter: 'blur(8px)'\r\n  },\r\n};\r\n\r\nexport interface Award {\r\n  // Actual type information:\r\n  // {\r\n  //    nameAward: string;\r\n  //    numAward: string;\r\n  // }\r\n  [index: string]: string;\r\n}\r\n\r\nexport interface PcStatus {\r\n  user: User;\r\n  ready: boolean;\r\n  numTickets: number;\r\n}\r\n\r\nexport interface User {\r\n  username: string;\r\n  id: string;\r\n  room: string;\r\n}\r\n\r\ninterface ConfigProps {\r\n  socket: any;\r\n  name: string;\r\n}\r\n\r\ninterface ConfigState {\r\n  type: string;\r\n\r\n  // Config\r\n  readyHost: boolean;\r\n  readyClient: boolean;\r\n\r\n  //  Host Config State options\r\n  awards: Award[];\r\n\r\n  //  PC Config State options\r\n  numHouses: number;\r\n\r\n  // List of players who are ready to play\r\n  PcsStatus: PcStatus[];\r\n\r\n  // notification for host disconnected\r\n  hostDisconnected: boolean;\r\n\r\n  // For warning modal which opens when host hits start game if some player is not ready\r\n  isModalOpen: boolean;\r\n\r\n  // When host tries to start game when there is no one in the game room\r\n  isToastOpen: boolean;\r\n\r\n  // when arrive on host screen, ask the user if they want to see tutorial or not\r\n  watchTutorialModal: boolean\r\n\r\n  // passed to child components to let them know if user selected to watch the tutorial or not\r\n  runWalkthrough: boolean\r\n  //\r\n  hasGameAlreadyStarted: boolean;\r\n}\r\n\r\nclass Config extends Component<ConfigProps, ConfigState> {\r\n  // For the toast component to hide initially and not add animation on initial render\r\n  hideToastInitially: boolean;\r\n  constructor(props: ConfigProps) {\r\n    super(props);\r\n    this.state = {\r\n      type: \"\",\r\n      numHouses: 1,\r\n      readyHost: false,\r\n      readyClient: false,\r\n      PcsStatus: [],\r\n      isModalOpen: false,\r\n      isToastOpen: false,\r\n      watchTutorialModal: true,\r\n      runWalkthrough: false,\r\n      hasGameAlreadyStarted: false,\r\n      awards: [\r\n        {\r\n          nameAward: \"First Line\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Second Line\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Third Line\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Corners\",\r\n          numAward: \"1\",\r\n        },\r\n        {\r\n          nameAward: \"Full House\",\r\n          numAward: \"1\",\r\n        },\r\n      ],\r\n      hostDisconnected: false,\r\n    };\r\n    this.hideToastInitially = true;\r\n  }\r\n\r\n  // Only handles on host's config when he presses start game button.\r\n  handlleHostConfigDone = () => {\r\n    if (this.state.isModalOpen) {\r\n      this.setState({ isModalOpen: false });\r\n    }\r\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\r\n    console.log(\"config submitted from host\", this.state.awards);\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Extracting roomID from the URL\r\n    let roomID = window.location.pathname.substr(\r\n      window.location.pathname.lastIndexOf(\"/\") + 1\r\n    );\r\n\r\n    // asking server to join room\r\n    this.props.socket.emit(\"joinRoom\", {\r\n      room: roomID,\r\n      username: this.props.name,\r\n    });\r\n\r\n    // check if the game has already started or not\r\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\r\n      this.setState({ hasGameAlreadyStarted: true });\r\n    });\r\n\r\n    // server response: player gets know if he is host or pc\r\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any) => {\r\n      this.setState({\r\n        type: playerTypeObj.type, // pass this type to player as well\r\n      });\r\n\r\n      // Receiving event on Host from new PC who has joined and sending them\r\n      // the list of readyPlayers\r\n      if (playerTypeObj.type === \"Host\") {\r\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\r\n          let PcsStatus = this.state.PcsStatus;\r\n          let newPcStatus: PcStatus = {\r\n            user: user,\r\n            ready: false,\r\n            numTickets: 0,\r\n          };\r\n          PcsStatus.push(newPcStatus);\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n\r\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\r\n          // Find user in array and make him ready\r\n          let PcsStatus = this.state.PcsStatus;\r\n          for (let i = 0; i < PcsStatus.length; ++i) {\r\n            if (PcsStatus[i].user.id === user.id) {\r\n              PcsStatus[i].ready = true;\r\n              PcsStatus[i].numTickets = numTickets;\r\n            }\r\n          }\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n\r\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\r\n          // dealing with ready/not ready\r\n          let PcsStatus = this.state.PcsStatus;\r\n          for (let i = 0; i < PcsStatus.length; ++i) {\r\n            if (PcsStatus[i].user.id === user.id) {\r\n              // Remove this user from PcsStatus\r\n              PcsStatus.splice(i, 1);\r\n            }\r\n          }\r\n          this.setState({ PcsStatus: PcsStatus });\r\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\r\n        });\r\n      }\r\n    });\r\n\r\n    // server sending awards from Host as Host is ready\r\n    this.props.socket.on(\"HostConfigDone\", (awards: any) => {\r\n      this.setState({\r\n        awards: awards,\r\n        readyHost: true,\r\n      });\r\n    });\r\n\r\n    // Know the status of all the players if someone new joined or got ready\r\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\r\n      this.setState({ PcsStatus: PcsStatus });\r\n    });\r\n\r\n    // Host disconnect\r\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\r\n      console.log(userHost, \": host disconnected\");\r\n      this.setState({\r\n        hostDisconnected: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  // For Host Config\r\n  handleChangeHost = (idx: number) => (e: any) => {\r\n    const eTarget = e.target;\r\n    let name: string = eTarget.name;\r\n    let value: string = eTarget.value;\r\n\r\n    const awards = this.state.awards;\r\n\r\n    awards[idx][name] = value;\r\n\r\n    this.setState({\r\n      awards,\r\n    });\r\n  };\r\n  handleAddRow = () => {\r\n    const item = {\r\n      nameAward: \"\",\r\n      numAward: \"\",\r\n    };\r\n    this.setState({\r\n      awards: [...this.state.awards, item],\r\n    });\r\n  };\r\n  handleRemoveRow = () => {\r\n    this.setState({\r\n      awards: this.state.awards.slice(0, -1),\r\n    });\r\n  };\r\n  handleRemoveSpecificRow = (idx: number) => () => {\r\n    const awards = [...this.state.awards];\r\n    awards.splice(idx, 1);\r\n    this.setState({ awards });\r\n  };\r\n\r\n  // For PC Config\r\n  handleChangePC = (event: any) => {\r\n    const { value } = event.target;\r\n    if (this.state.type === \"PC\") {\r\n      // sanity check\r\n      this.setState({\r\n        numHouses: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  // common function for Host and PC Config\r\n  handleSubmit = (event: any) => {\r\n    this.setState({\r\n      readyClient: true,\r\n    });\r\n    if (this.state.type === \"Host\") {\r\n      // start the game only when there are actual players in the game\r\n      if (this.state.PcsStatus.length > 0) {\r\n        // checking if all the players are ready\r\n        let isEveryOneReady = true;\r\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\r\n          if (!this.state.PcsStatus[i].ready) {\r\n            isEveryOneReady = false;\r\n            continue;\r\n          }\r\n        }\r\n        if (isEveryOneReady) {\r\n          this.handlleHostConfigDone();\r\n        } else {\r\n          this.setState({ isModalOpen: true });\r\n        }\r\n      } else {\r\n        // To make the toast visible\r\n        this.hideToastInitially = false;\r\n        this.setState({ isToastOpen: true });\r\n      }\r\n    } else if (this.state.type === \"PC\") {\r\n      //let everyone know that i am ready. Backend knows who I am by socket.id\r\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  loopfun = (val: number) => {\r\n    const array = [];\r\n    for (let i = 0; i < val; i++) {\r\n      array.push(<li></li>)\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    // game is over if there is no host\r\n    if (this.state.hostDisconnected) {\r\n      return (\r\n        <div className=\"nohostleft\">\r\n          <h1 className=\"host-configuration\">\r\n            Host left the game. Please close this tab. Generate a new room if\r\n            you want to play more.\r\n          </h1>\r\n          <a href=\"/\" className=\"linkbtn\">\r\n            <button className=\"btn\">Back</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // If new playerjoins in already started game or host becomes ready (starts the game)\r\n    // this pc is not ready, let him know that he cannot play now in this game\r\n    if (\r\n      this.state.hasGameAlreadyStarted ||\r\n      (this.state.readyHost && !this.state.readyClient)\r\n    ) {\r\n      return (\r\n        <div className=\"gamestartedplaynext\">\r\n          <h1 className=\"host-configuration\">\r\n            This game was started without you. You can play in the next game.\r\n            Meanwhile you can go back to the home screen and play another game\r\n            :)\r\n          </h1>\r\n          <a href=\"/\" className=\"linkbtn\">\r\n            <button className=\"btn\">Home</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let mainComponent = null;\r\n    if (this.state.readyHost && this.state.readyClient) {\r\n      // display player\r\n      mainComponent = (\r\n        <Player\r\n          socket={this.props.socket}\r\n          numHouses={this.state.numHouses}\r\n          name={this.props.name}\r\n          type={this.state.type}\r\n          awards={this.state.awards}\r\n          runWalkthrough={this.state.runWalkthrough}\r\n        />\r\n      );\r\n    } else if (this.state.type === \"Host\") {\r\n      // form for host configuration\r\n      //    Choosing Awards\r\n      // pass handleSubmit as a prop\r\n\r\n      mainComponent = (\r\n        <div className=\"config-container\">\r\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough} />\r\n          <Snackbar\r\n            message=\"Share this 'join code' with other players\"\r\n            actionText=\"Copy code\"\r\n          />\r\n          <Toast\r\n            message={\"There are no players in the game right now\"}\r\n            isShown={this.state.isToastOpen}\r\n            handleClose={() => {\r\n              this.setState({ isToastOpen: false });\r\n            }}\r\n            initiallyHidden={this.hideToastInitially}\r\n          />\r\n          {\r\n            this.state.isModalOpen ? <div modal-status={this.state.watchTutorialModal} className=\"modalpoppup\">\r\n              <div className=\"area\" >\r\n                <ul className=\"circles\">\r\n                  {this.loopfun(10)}\r\n                </ul>\r\n              </div >\r\n              <div className=\"modalpoppupcontent\">\r\n                <h3 style={{ color: \"#000000\" }}>Some players are still not ready.</h3>\r\n                <h3 style={{ color: \"#000000\" }}>Are you sure you want to start the game?</h3>\r\n                <div className=\"modal-buttons\">\r\n                  <button style={{ margin: 5 }} className=\"btn btn__primary\" onClick={this.handlleHostConfigDone}>Yes</button>\r\n                  <button\r\n                    style={{ margin: 5 }}\r\n                    className=\"btn\"\r\n                    onClick={() => {\r\n                      this.setState({ isModalOpen: false });\r\n                    }}\r\n                  >\r\n                    No\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div> : null\r\n          }\r\n          <h1 className=\"host-configuration\">Game Setup</h1>\r\n          <ConfigTable\r\n            awards={this.state.awards}\r\n            handleChangeHost={this.handleChangeHost}\r\n            handleAddRow={this.handleAddRow}\r\n            handleRemoveRow={this.handleRemoveRow}\r\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\r\n            handleSubmit={this.handleSubmit}\r\n          />\r\n          <ReadyPlayers players={this.state.PcsStatus} />\r\n        </div>\r\n      );\r\n    } else if (this.state.type === \"PC\") {\r\n      // form for PC configuration\r\n      //    Number of Tickets\r\n      mainComponent = (\r\n        <div className=\"config-container\">\r\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough} />\r\n          <h1 className=\"pc-configuration\">Player Setup</h1>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <table className=\"config-table\" id=\"pc-config-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"number-tickets\">Number of Tickets:</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      max=\"6\"\r\n                      min=\"1\"\r\n                      value={this.state.numHouses}\r\n                      onChange={this.handleChangePC}\r\n                      required\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"waiting-message-tickets\">Waiting for host to start the game</td>\r\n                  <td>\r\n                    <button className=\"ready btn btn__primary\" type=\"submit\">\r\n                      Ready\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </form>\r\n          <ReadyPlayers players={this.state.PcsStatus} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n\r\n        {mainComponent}\r\n        {\r\n          this.state.watchTutorialModal ? <div modal-status={this.state.watchTutorialModal} className=\"modalpoppup\">\r\n            <div className=\"area\" >\r\n              <ul className=\"circles\">\r\n                {this.loopfun(10)}\r\n              </ul>\r\n            </div >\r\n            <div className=\"modalpoppupcontent\">\r\n              <h3 style={{ color: \"#000000\" }}>Would you like to watch tutorial?</h3>\r\n              <div className=\"modal-buttons\">\r\n                <button style={{ margin: 5 }} className=\"btn btn__primary\" onClick={() => {\r\n                  this.setState({ runWalkthrough: true, watchTutorialModal: false })\r\n                  console.log(\"clicked yes\");\r\n                }\r\n                }>Yes</button>\r\n                <button\r\n                  style={{ margin: 5 }}\r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                    console.log(\"clicked No\");\r\n                    this.setState({ runWalkthrough: false, watchTutorialModal: false });\r\n                  }}\r\n                >\r\n                  No\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n        }\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Config;\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport Config from \"./Config\";\r\n\r\ninterface EnterNameProps {\r\n  socket: any;\r\n}\r\n\r\ninterface EnterNameState {\r\n  isEmpty: boolean;\r\n  name: string;\r\n  submitted: boolean;\r\n}\r\n\r\nclass EnterName extends Component<EnterNameProps, EnterNameState> {\r\n  constructor(props: EnterNameProps) {\r\n    super(props);\r\n    this.state = { isEmpty: true, name: \"\", submitted: false };\r\n  }\r\n\r\n  handleChange = (event: any) => {\r\n    const { value } = event.target;\r\n    if (value !== \"\") {\r\n      this.setState({ isEmpty: false, name: value });\r\n    } else {\r\n      this.setState({ isEmpty: true, name: value });\r\n    }\r\n  };\r\n\r\n  handleKeyPress = (event: any) => {\r\n    const { value } = event.target;\r\n    if (event.key === \"Enter\" && value !== \"\") {\r\n      console.log(\"enter press here!\");\r\n      this.setState({\r\n        submitted: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSubmit = (event: any) => {\r\n    this.setState({\r\n      submitted: true,\r\n    });\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.submitted) {\r\n      let myStyles: React.CSSProperties = {};\r\n      if (!this.state.isEmpty) {\r\n        myStyles = { visibility: \"visible\" };\r\n      } else {\r\n        myStyles = { visibility: \"hidden\" };\r\n      }\r\n      let submitButton = (\r\n        <div style={myStyles}>\r\n            <button className=\"btn btn__primary\" onClick={this.handleSubmit}><p>OK</p></button>\r\n\r\n        </div>\r\n      )\r\n\r\n      return (\r\n        <div className=\"enter-name-container\">\r\n          <div className=\"enter-name\">\r\n            <p className=\"enter-name-question\">Hi. What's your name?</p>\r\n            <input\r\n              id=\"enter-name\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              placeholder=\"Type your answer here...\"\r\n              onChange={this.handleChange}\r\n              onKeyPress={this.handleKeyPress}\r\n              spellCheck=\"false\"\r\n              autoFocus\r\n            />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            {submitButton}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <Config socket={this.props.socket} name={this.state.name} />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default EnterName;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"../css/App.css\";\r\nimport io from \"socket.io-client\";\r\nimport EnterName from \"./EnterName\";\r\n\r\ninterface AppState {\r\n  socket: any;\r\n}\r\n\r\ninterface AppProps { }\r\n\r\nclass App extends Component<AppProps, AppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      socket: io(),\r\n    };\r\n\r\n    console.log(this.state.socket)\r\n  }\r\n  loopfun = (val: number) => {\r\n    const array = [];\r\n    for (let i = 0; i < val; i++) {\r\n      array.push(<li></li>)\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"area\" >\r\n          <ul className=\"circles\">\r\n            {this.loopfun(10)}\r\n          </ul>\r\n        </div>\r\n        <div className=\"App\">\r\n          <div className=\"homeclick\">\r\n            <a href=\"/\" style={{ color: \"#000000\", textDecoration: 'none' }} title=\"home\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ionicon s-ion-icon\" viewBox=\"0 0 512 512\">\r\n                <path\r\n                  d=\"M261.56 101.28a8 8 0 00-11.06 0L66.4 277.15a8 8 0 00-2.47 5.79L63.9 448a32 32 0 0032 32H192a16 16 0 0016-16V328a8 8 0 018-8h80a8 8 0 018 8v136a16 16 0 0016 16h96.06a32 32 0 0032-32V282.94a8 8 0 00-2.47-5.79z\">\r\n                </path>\r\n                <path\r\n                  d=\"M490.91 244.15l-74.8-71.56V64a16 16 0 00-16-16h-48a16 16 0 00-16 16v32l-57.92-55.38C272.77 35.14 264.71 32 256 32c-8.68 0-16.72 3.14-22.14 8.63l-212.7 203.5c-6.22 6-7 15.87-1.34 22.37A16 16 0 0043 267.56L250.5 69.28a8 8 0 0111.06 0l207.52 198.28a16 16 0 0022.59-.44c6.14-6.36 5.63-16.86-.76-22.97z\">\r\n                </path>\r\n              </svg>\r\n            </a>\r\n          </div>\r\n          <EnterName socket={this.state.socket} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {doNotLeavePage} from './utils/utils'\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nwindow.addEventListener(\"beforeunload\", doNotLeavePage);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n"],"sourceRoot":""}